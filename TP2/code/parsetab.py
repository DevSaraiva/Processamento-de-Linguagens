
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHARACTERS COMMA EQUAL EXPRESSION HASHTAGS IGNORE LEFTBRACKET LEXMARKER LITERALS RE RIGHTBRACKET SLEFTBRACKET SPACE SQM SRIGHTBRACKET STRING TOKENS UPPERWORD WORDfrase : lex lex : LEXMARKER literals ignore tokens functionsliterals : LITERALS EQUAL SPACE CHARACTERS commentliterals : comment : HASHTAGS wordscomment : words : words WORDwords : WORDignore : IGNORE EQUAL SPACE CHARACTERS commentignore : tokens : TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET commenttokens : tokenNames : tokenNames COMMA SQM UPPERWORD SQMtokenNames : SQM UPPERWORD SQMfunctions : functions functionfunctions : function : RE LEFTBRACKET content RIGHTBRACKET comment content : SQM UPPERWORD SQM COMMA EXPRESSIONcontent : SQM UPPERWORD SQM COMMA WORDcontent : STRING COMMA EXPRESSIONcontent : CHARACTERS COMMA EXPRESSION'
    
_lr_action_items = {'LEXMARKER':([0,],[3,]),'$end':([1,2,3,4,6,9,13,16,17,20,21,26,27,28,33,36,37,41,44,],[0,-1,-4,-10,-12,-16,-2,-6,-15,-6,-3,-9,-5,-8,-6,-7,-6,-11,-17,]),'LITERALS':([3,],[5,]),'IGNORE':([3,4,16,21,27,28,36,],[-4,7,-6,-3,-5,-8,-7,]),'TOKENS':([3,4,6,16,20,21,26,27,28,36,],[-4,-10,10,-6,-6,-3,-9,-5,-8,-7,]),'RE':([3,4,6,9,13,16,17,20,21,26,27,28,33,36,37,41,44,],[-4,-10,-12,-16,18,-6,-15,-6,-3,-9,-5,-8,-6,-7,-6,-11,-17,]),'EQUAL':([5,7,10,],[8,11,14,]),'SPACE':([8,11,],[12,15,]),'CHARACTERS':([12,15,23,],[16,20,32,]),'SLEFTBRACKET':([14,],[19,]),'HASHTAGS':([16,20,33,37,],[22,22,22,22,]),'LEFTBRACKET':([18,],[23,]),'SQM':([19,23,34,35,38,48,],[25,30,42,43,45,50,]),'WORD':([22,27,28,36,49,],[28,36,-8,-7,52,]),'STRING':([23,],[31,]),'SRIGHTBRACKET':([24,43,50,],[33,-14,-13,]),'COMMA':([24,31,32,43,45,50,],[34,39,40,-14,49,-13,]),'UPPERWORD':([25,30,42,],[35,38,48,]),'RIGHTBRACKET':([29,46,47,51,52,],[37,-20,-21,-18,-19,]),'EXPRESSION':([39,40,49,],[46,47,51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'frase':([0,],[1,]),'lex':([0,],[2,]),'literals':([3,],[4,]),'ignore':([4,],[6,]),'tokens':([6,],[9,]),'functions':([9,],[13,]),'function':([13,],[17,]),'comment':([16,20,33,37,],[21,26,41,44,]),'tokenNames':([19,],[24,]),'words':([22,],[27,]),'content':([23,],[29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> frase","S'",1,None,None,None),
  ('frase -> lex','frase',1,'p_phrase','parser_yacc.py',5),
  ('lex -> LEXMARKER literals ignore tokens functions','lex',5,'p_lex','parser_yacc.py',8),
  ('literals -> LITERALS EQUAL SPACE CHARACTERS comment','literals',5,'p_literals','parser_yacc.py',14),
  ('literals -> <empty>','literals',0,'p_literals_empty','parser_yacc.py',19),
  ('comment -> HASHTAGS words','comment',2,'p_comment','parser_yacc.py',23),
  ('comment -> <empty>','comment',0,'p_comment_empty','parser_yacc.py',27),
  ('words -> words WORD','words',2,'p_words','parser_yacc.py',31),
  ('words -> WORD','words',1,'p_words_stop','parser_yacc.py',35),
  ('ignore -> IGNORE EQUAL SPACE CHARACTERS comment','ignore',5,'p_ignore','parser_yacc.py',39),
  ('ignore -> <empty>','ignore',0,'p_ignore_empty','parser_yacc.py',43),
  ('tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment','tokens',6,'p_tokens','parser_yacc.py',46),
  ('tokens -> <empty>','tokens',0,'p_tokens_empty','parser_yacc.py',51),
  ('tokenNames -> tokenNames COMMA SQM UPPERWORD SQM','tokenNames',5,'p_tokenNames','parser_yacc.py',54),
  ('tokenNames -> SQM UPPERWORD SQM','tokenNames',3,'p_tokenNames_stop','parser_yacc.py',58),
  ('functions -> functions function','functions',2,'p_functions','parser_yacc.py',62),
  ('functions -> <empty>','functions',0,'p_functions_empty','parser_yacc.py',65),
  ('function -> RE LEFTBRACKET content RIGHTBRACKET comment','function',5,'p_function','parser_yacc.py',68),
  ('content -> SQM UPPERWORD SQM COMMA EXPRESSION','content',5,'p_content_returned','parser_yacc.py',73),
  ('content -> SQM UPPERWORD SQM COMMA WORD','content',5,'p_content_returnedWord','parser_yacc.py',79),
  ('content -> STRING COMMA EXPRESSION','content',3,'p_content_string','parser_yacc.py',84),
  ('content -> CHARACTERS COMMA EXPRESSION','content',3,'p_content_characters','parser_yacc.py',89),
]
