
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHARACTERS COMMA EQUAL ERROR EXPRESSION HASHTAGS IGNORE LEFTBRACKET LEXMARKER LITERALS RE RETURN RIGHTBRACKET SLEFTBRACKET SQM SRIGHTBRACKET STRING TOKENS TVALUE UPPERWORD WORDfrase : lex lex : LEXMARKER literals ignore tokens functionsliterals : LITERALS EQUAL CHARACTERS commentliterals : comment : HASHTAGS wordswords : words WORDwords : WORDignore : IGNORE EQUAL CHARACTERS commentignore : tokens : TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET commenttokens : tokenNames : tokenNames COMMA SQM UPPERWORD SQMtokenNames : SQM UPPERWORD SQMfunctions : functions functionfunctions : functionfunctions : function : RE RETURN LEFTBRACKET SQM UPPERWORD COMMA TVALUE SQM RIGHTBRACKET commentfunction : RE RETURN LEFTBRACKET SQM UPPERWORD COMMA WORD LEFTBRACKET TVALUE RIGHTBRACKET SQM RIGHTBRACKET commentfunction : RE ERROR LEFTBRACKET STRING COMMA EXPRESSION RIGHTBRACKET comment'
    
_lr_action_items = {'LEXMARKER':([0,],[3,]),'$end':([1,2,3,4,6,9,13,14,18,20,24,25,26,31,39,51,54,58,],[0,-1,-4,-9,-11,-16,-2,-15,-3,-14,-8,-5,-7,-6,-10,-19,-17,-18,]),'LITERALS':([3,],[5,]),'IGNORE':([3,4,18,25,26,31,],[-4,7,-3,-5,-7,-6,]),'TOKENS':([3,4,6,18,24,25,26,31,],[-4,-9,10,-3,-8,-5,-7,-6,]),'RE':([3,4,6,9,13,14,18,20,24,25,26,31,39,51,54,58,],[-4,-9,-11,15,15,-15,-3,-14,-8,-5,-7,-6,-10,-19,-17,-18,]),'EQUAL':([5,7,10,],[8,11,16,]),'CHARACTERS':([8,11,],[12,17,]),'HASHTAGS':([12,17,34,47,52,57,],[19,19,19,19,19,19,]),'RETURN':([15,],[21,]),'ERROR':([15,],[22,]),'SLEFTBRACKET':([16,],[23,]),'WORD':([19,25,26,31,42,],[26,31,-7,-6,46,]),'LEFTBRACKET':([21,22,46,],[27,28,50,]),'SQM':([23,27,35,36,44,45,55,],[30,32,40,41,48,49,56,]),'STRING':([28,],[33,]),'SRIGHTBRACKET':([29,41,48,],[34,-13,-12,]),'COMMA':([29,33,37,41,48,],[35,38,42,-13,-12,]),'UPPERWORD':([30,32,40,],[36,37,44,]),'EXPRESSION':([38,],[43,]),'TVALUE':([42,50,],[45,53,]),'RIGHTBRACKET':([43,49,53,56,],[47,52,55,57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'frase':([0,],[1,]),'lex':([0,],[2,]),'literals':([3,],[4,]),'ignore':([4,],[6,]),'tokens':([6,],[9,]),'functions':([9,],[13,]),'function':([9,13,],[14,20,]),'comment':([12,17,34,47,52,57,],[18,24,39,51,54,58,]),'words':([19,],[25,]),'tokenNames':([23,],[29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> frase","S'",1,None,None,None),
  ('frase -> lex','frase',1,'p_phrase','parser_yacc.py',33),
  ('lex -> LEXMARKER literals ignore tokens functions','lex',5,'p_lex','parser_yacc.py',37),
  ('literals -> LITERALS EQUAL CHARACTERS comment','literals',4,'p_literals','parser_yacc.py',40),
  ('literals -> <empty>','literals',0,'p_literals_empty','parser_yacc.py',43),
  ('comment -> HASHTAGS words','comment',2,'p_comment','parser_yacc.py',46),
  ('words -> words WORD','words',2,'p_words','parser_yacc.py',49),
  ('words -> WORD','words',1,'p_words_stop','parser_yacc.py',52),
  ('ignore -> IGNORE EQUAL CHARACTERS comment','ignore',4,'p_ignore','parser_yacc.py',55),
  ('ignore -> <empty>','ignore',0,'p_ignore_empty','parser_yacc.py',58),
  ('tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment','tokens',6,'p_tokens','parser_yacc.py',61),
  ('tokens -> <empty>','tokens',0,'p_tokens_empty','parser_yacc.py',64),
  ('tokenNames -> tokenNames COMMA SQM UPPERWORD SQM','tokenNames',5,'p_tokenNames','parser_yacc.py',67),
  ('tokenNames -> SQM UPPERWORD SQM','tokenNames',3,'p_tokenNames_stop','parser_yacc.py',70),
  ('functions -> functions function','functions',2,'p_functions','parser_yacc.py',73),
  ('functions -> function','functions',1,'p_functions_stop','parser_yacc.py',76),
  ('functions -> <empty>','functions',0,'p_functions_empty','parser_yacc.py',79),
  ('function -> RE RETURN LEFTBRACKET SQM UPPERWORD COMMA TVALUE SQM RIGHTBRACKET comment','function',10,'p_function_tvalue','parser_yacc.py',82),
  ('function -> RE RETURN LEFTBRACKET SQM UPPERWORD COMMA WORD LEFTBRACKET TVALUE RIGHTBRACKET SQM RIGHTBRACKET comment','function',13,'p_function_word','parser_yacc.py',85),
  ('function -> RE ERROR LEFTBRACKET STRING COMMA EXPRESSION RIGHTBRACKET comment','function',8,'p_function_expression','parser_yacc.py',88),
]
