
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BODYFUNCTIONFINAL BODYFUNCTIONLINE CHAR CHARACTERS CHARS COLON COMMA CONTENTVAR DEF DOUBLENEWLINE EQUAL EXPGRAM EXPRESSION FUNCTION HASHTAG HASHTAGS IGNORE INITVAR INITYACC LEFT LEFTBRACKET LEFTCOTTER LEXMARKER LITERAL LITERALS NAMEFUNC NAMEPROD NAMEVAR NEWLINE PARSEYACC PERCENTAGE PRECEDENCE PRECTAG RE RETURNEDPRODS RIGHT RIGHTBRACKET RIGHTCOTTER SLEFTBRACKET SQM SRIGHTBRACKET STRING TOKENS UPPERWORD WORD YACCMARKERphrase : lex yacclex : LEXMARKER literals ignore tokens functionsliterals : LITERALS EQUAL CHARACTERS commentliterals : comment : HASHTAGS words NEWLINEcomment : words : words WORDwords : WORDignore : IGNORE EQUAL CHARACTERS commentignore : tokens : TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET commenttokens : tokenNames : tokenNames COMMA SQM UPPERWORD SQMtokenNames : SQM UPPERWORD SQMfunctions : functions functionfunctions : function : RE LEFTBRACKET content RIGHTBRACKET comment content : SQM UPPERWORD SQM COMMA EXPRESSIONcontent : SQM UPPERWORD SQM COMMA WORDcontent : STRING COMMA EXPRESSIONcontent : CHARACTERS COMMA EXPRESSIONyacc : YACCMARKER precedence vars prods PERCENTAGE functionsyacc inityacc parseprecedence : PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKETprecedence : precedences : precedences tokenprecedenceprecedences : tokenprecedence : LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMArl : SQM RIGHT SQMrl : SQM LEFT SQMnametokensprec :  nametokensprec COMMA SQM UPPERWORD SQMnametokensprec : nametokensprec COMMA SQM CHAR SQMnametokensprec : SQM CHAR SQMnametokensprec : SQM UPPERWORD SQMvarsdesc : HASHTAG words NEWLINEvars : varsdesc varsauxvarsaux : varsaux : varsaux var var :  CONTENTVAR changelinechangeline :  NEWLINEchangeline :  DOUBLENEWLINEprods : prods prodprods : prod : WORD WORD expProd LEFTCOTTER CHARS RIGHTCOTTERexpProd : expProd UPPERWORDexpProd : expProd WORDexpProd : expProd SQM CHAR SQMexpProd : expProd SQM EQUAL SQMexpProd : expProd SQM LEFTBRACKET SQMexpProd : expProd SQM RIGHTBRACKET SQMexpProd : expProd markerPrecexpProd : markerPrec : PRECTAG UPPERWORDfunctionsyacc : functionsyacc functionyaccfunctionsyacc : functionyacc : FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL bodyfunction : bodyfunction BODYFUNCTIONLINEbodyfunction : parse : WORD LEFTBRACKET CHARACTERS RIGHTBRACKETinityacc : WORD EQUAL INITYACC'
    
_lr_action_items = {'LEXMARKER':([0,],[3,]),'$end':([1,4,70,122,],[0,-1,-22,-58,]),'YACCMARKER':([2,3,6,10,17,20,26,28,29,39,42,55,67,83,87,103,],[5,-4,-10,-12,-16,-6,-2,-6,-3,-15,-9,-5,-6,-6,-11,-17,]),'LITERALS':([3,],[7,]),'IGNORE':([3,6,20,29,55,],[-4,11,-6,-3,-5,]),'TOKENS':([3,6,10,20,28,29,42,55,],[-4,-10,18,-6,-6,-3,-9,-5,]),'RE':([3,6,10,17,20,26,28,29,39,42,55,67,83,87,103,],[-4,-10,-12,-16,-6,40,-6,-3,-15,-9,-5,-6,-6,-11,-17,]),'PRECEDENCE':([5,],[9,]),'HASHTAG':([5,8,49,],[-24,15,-23,]),'EQUAL':([7,9,11,18,58,77,],[12,16,19,27,72,95,]),'CHARACTERS':([12,19,52,90,],[20,28,66,108,]),'PERCENTAGE':([13,14,21,22,32,34,36,46,47,48,111,],[-42,-36,31,-35,-41,-37,-34,-38,-39,-40,-43,]),'WORD':([13,14,15,21,22,23,24,30,31,32,33,34,36,37,43,44,45,46,47,48,56,57,60,74,76,78,91,98,110,111,112,113,114,115,120,],[-42,-36,24,33,-35,37,-8,24,-54,-41,45,-37,-34,-7,37,58,-51,-38,-39,-40,71,-53,74,-45,-44,-50,-59,-52,-55,-43,-46,-47,-48,-49,128,]),'CONTENTVAR':([14,22,34,36,46,47,48,],[-36,35,-37,-34,-38,-39,-40,]),'SLEFTBRACKET':([16,27,],[25,41,]),'HASHTAGS':([20,28,67,83,],[30,30,30,30,]),'NEWLINE':([23,24,35,37,43,],[36,-8,47,-7,55,]),'SRIGHTBRACKET':([25,38,50,53,89,121,124,],[-26,49,-25,67,-14,-13,-27,]),'LEFTBRACKET':([25,38,40,50,71,77,124,],[-26,51,52,-25,90,96,-27,]),'FUNCTION':([31,44,57,110,],[-54,59,-53,-55,]),'DOUBLENEWLINE':([35,],[48,]),'SQM':([41,45,51,52,60,68,69,74,76,78,80,81,82,84,94,95,96,97,98,107,112,113,114,115,116,118,119,129,130,],[54,-51,62,64,77,88,89,-45,-44,-50,100,101,102,104,112,113,114,115,-52,121,-46,-47,-48,-49,123,125,126,131,132,]),'LEFTCOTTER':([45,60,74,76,78,98,112,113,114,115,],[-51,75,-45,-44,-50,-52,-46,-47,-48,-49,]),'UPPERWORD':([45,54,60,64,74,76,78,79,88,98,100,112,113,114,115,123,],[-51,69,76,84,-45,-44,-50,98,107,-52,119,-46,-47,-48,-49,129,]),'PRECTAG':([45,60,74,76,78,98,112,113,114,115,],[-51,79,-45,-44,-50,-52,-46,-47,-48,-49,]),'STRING':([52,],[65,]),'COMMA':([53,61,65,66,89,99,101,102,104,117,121,125,126,131,132,],[68,80,85,86,-14,116,-28,-29,120,124,-13,-32,-33,-30,-31,]),'BODYFUNCTIONLINE':([59,73,92,109,],[73,-57,109,-56,]),'RIGHT':([62,],[81,]),'LEFT':([62,],[82,]),'RIGHTBRACKET':([63,77,99,105,106,108,125,126,127,128,131,132,],[83,97,117,-20,-21,122,-32,-33,-18,-19,-30,-31,]),'INITYACC':([72,],[91,]),'BODYFUNCTIONFINAL':([73,92,109,],[-57,110,-56,]),'CHARS':([75,],[93,]),'CHAR':([77,100,123,],[94,118,130,]),'EXPRESSION':([85,86,120,],[105,106,127,]),'RIGHTCOTTER':([93,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'phrase':([0,],[1,]),'lex':([0,],[2,]),'yacc':([2,],[4,]),'literals':([3,],[6,]),'precedence':([5,],[8,]),'ignore':([6,],[10,]),'vars':([8,],[13,]),'varsdesc':([8,],[14,]),'tokens':([10,],[17,]),'prods':([13,],[21,]),'varsaux':([14,],[22,]),'words':([15,30,],[23,43,]),'functions':([17,],[26,]),'comment':([20,28,67,83,],[29,42,87,103,]),'prod':([21,],[32,]),'var':([22,],[34,]),'precedences':([25,],[38,]),'function':([26,],[39,]),'functionsyacc':([31,],[44,]),'changeline':([35,],[46,]),'tokenprecedence':([38,],[50,]),'tokenNames':([41,],[53,]),'inityacc':([44,],[56,]),'functionyacc':([44,],[57,]),'expProd':([45,],[60,]),'rl':([51,],[61,]),'content':([52,],[63,]),'parse':([56,],[70,]),'markerPrec':([60,],[78,]),'bodyfunction':([73,],[92,]),'nametokensprec':([80,],[99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> phrase","S'",1,None,None,None),
  ('phrase -> lex yacc','phrase',2,'p_phrase','parser_yacc.py',10),
  ('lex -> LEXMARKER literals ignore tokens functions','lex',5,'p_lex','parser_yacc.py',13),
  ('literals -> LITERALS EQUAL CHARACTERS comment','literals',4,'p_literals','parser_yacc.py',110),
  ('literals -> <empty>','literals',0,'p_literals_empty','parser_yacc.py',114),
  ('comment -> HASHTAGS words NEWLINE','comment',3,'p_comment','parser_yacc.py',118),
  ('comment -> <empty>','comment',0,'p_comment_empty','parser_yacc.py',123),
  ('words -> words WORD','words',2,'p_words','parser_yacc.py',127),
  ('words -> WORD','words',1,'p_words_stop','parser_yacc.py',131),
  ('ignore -> IGNORE EQUAL CHARACTERS comment','ignore',4,'p_ignore','parser_yacc.py',135),
  ('ignore -> <empty>','ignore',0,'p_ignore_empty','parser_yacc.py',139),
  ('tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment','tokens',6,'p_tokens','parser_yacc.py',142),
  ('tokens -> <empty>','tokens',0,'p_tokens_empty','parser_yacc.py',146),
  ('tokenNames -> tokenNames COMMA SQM UPPERWORD SQM','tokenNames',5,'p_tokenNames','parser_yacc.py',149),
  ('tokenNames -> SQM UPPERWORD SQM','tokenNames',3,'p_tokenNames_stop','parser_yacc.py',153),
  ('functions -> functions function','functions',2,'p_functions','parser_yacc.py',157),
  ('functions -> <empty>','functions',0,'p_functions_empty','parser_yacc.py',161),
  ('function -> RE LEFTBRACKET content RIGHTBRACKET comment','function',5,'p_function','parser_yacc.py',165),
  ('content -> SQM UPPERWORD SQM COMMA EXPRESSION','content',5,'p_content_returned','parser_yacc.py',170),
  ('content -> SQM UPPERWORD SQM COMMA WORD','content',5,'p_content_returnedWord','parser_yacc.py',174),
  ('content -> STRING COMMA EXPRESSION','content',3,'p_content_string','parser_yacc.py',178),
  ('content -> CHARACTERS COMMA EXPRESSION','content',3,'p_content_characters','parser_yacc.py',183),
  ('yacc -> YACCMARKER precedence vars prods PERCENTAGE functionsyacc inityacc parse','yacc',8,'p_yacc','parser_yacc.py',191),
  ('precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET','precedence',5,'p_precedence','parser_yacc.py',252),
  ('precedence -> <empty>','precedence',0,'p_precedence_empty','parser_yacc.py',256),
  ('precedences -> precedences tokenprecedence','precedences',2,'p_precedences_varios','parser_yacc.py',260),
  ('precedences -> <empty>','precedences',0,'p_precedences_vazio','parser_yacc.py',264),
  ('tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA','tokenprecedence',6,'p_tokenprecedence','parser_yacc.py',268),
  ('rl -> SQM RIGHT SQM','rl',3,'p_rl_r','parser_yacc.py',272),
  ('rl -> SQM LEFT SQM','rl',3,'p_rl_l','parser_yacc.py',276),
  ('nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM','nametokensprec',5,'p_nametokensprec','parser_yacc.py',280),
  ('nametokensprec -> nametokensprec COMMA SQM CHAR SQM','nametokensprec',5,'p_nametokensprec_char','parser_yacc.py',284),
  ('nametokensprec -> SQM CHAR SQM','nametokensprec',3,'p_nametokensprec_char_single','parser_yacc.py',288),
  ('nametokensprec -> SQM UPPERWORD SQM','nametokensprec',3,'p_nametokensprec_upperword_single','parser_yacc.py',292),
  ('varsdesc -> HASHTAG words NEWLINE','varsdesc',3,'p_varsdesc','parser_yacc.py',297),
  ('vars -> varsdesc varsaux','vars',2,'p_vars','parser_yacc.py',303),
  ('varsaux -> <empty>','varsaux',0,'p_varsaux_empy','parser_yacc.py',308),
  ('varsaux -> varsaux var','varsaux',2,'p_varsaux','parser_yacc.py',311),
  ('var -> CONTENTVAR changeline','var',2,'p_var','parser_yacc.py',316),
  ('changeline -> NEWLINE','changeline',1,'p_changeline','parser_yacc.py',320),
  ('changeline -> DOUBLENEWLINE','changeline',1,'p_changeline2','parser_yacc.py',324),
  ('prods -> prods prod','prods',2,'p_prods','parser_yacc.py',330),
  ('prods -> <empty>','prods',0,'p_prods_empty','parser_yacc.py',334),
  ('prod -> WORD WORD expProd LEFTCOTTER CHARS RIGHTCOTTER','prod',6,'p_prod','parser_yacc.py',338),
  ('expProd -> expProd UPPERWORD','expProd',2,'p_expProd_token','parser_yacc.py',343),
  ('expProd -> expProd WORD','expProd',2,'p_expProd_terminal','parser_yacc.py',347),
  ('expProd -> expProd SQM CHAR SQM','expProd',4,'p_expProd_terminalLiteral','parser_yacc.py',351),
  ('expProd -> expProd SQM EQUAL SQM','expProd',4,'p_expProd_terminalEqual','parser_yacc.py',355),
  ('expProd -> expProd SQM LEFTBRACKET SQM','expProd',4,'p_expProd_leftbracket','parser_yacc.py',359),
  ('expProd -> expProd SQM RIGHTBRACKET SQM','expProd',4,'p_expProd_rightbracket','parser_yacc.py',363),
  ('expProd -> expProd markerPrec','expProd',2,'p_expProd_markerPrec','parser_yacc.py',368),
  ('expProd -> <empty>','expProd',0,'p_expProd_vazio','parser_yacc.py',372),
  ('markerPrec -> PRECTAG UPPERWORD','markerPrec',2,'p_markerPrec','parser_yacc.py',376),
  ('functionsyacc -> functionsyacc functionyacc','functionsyacc',2,'p_functionsyacc','parser_yacc.py',381),
  ('functionsyacc -> <empty>','functionsyacc',0,'p_functionsyacc_empty','parser_yacc.py',385),
  ('functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL','functionyacc',4,'p_functionyacc','parser_yacc.py',389),
  ('bodyfunction -> bodyfunction BODYFUNCTIONLINE','bodyfunction',2,'p_bodyfunction','parser_yacc.py',393),
  ('bodyfunction -> <empty>','bodyfunction',0,'p_bodyfunction_empty','parser_yacc.py',397),
  ('parse -> WORD LEFTBRACKET CHARACTERS RIGHTBRACKET','parse',4,'p_parse','parser_yacc.py',401),
  ('inityacc -> WORD EQUAL INITYACC','inityacc',3,'p_inityacc','parser_yacc.py',406),
]
