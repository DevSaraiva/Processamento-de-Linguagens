Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> frase
Rule 1     frase -> lex
Rule 2     lex -> LEXMARKER literals ignore tokens functions
Rule 3     literals -> LITERALS EQUAL CHARACTERS comment
Rule 4     literals -> <empty>
Rule 5     comment -> HASHTAGS words
Rule 6     comment -> <empty>
Rule 7     words -> words WORD
Rule 8     words -> WORD
Rule 9     ignore -> IGNORE EQUAL CHARACTERS comment
Rule 10    ignore -> <empty>
Rule 11    tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
Rule 12    tokens -> <empty>
Rule 13    tokenNames -> tokenNames COMMA SQM UPPERWORD SQM
Rule 14    tokenNames -> SQM UPPERWORD SQM
Rule 15    functions -> functions function
Rule 16    functions -> <empty>
Rule 17    function -> RE type LEFTBRACKET content RIGHTBRACKET comment
Rule 18    content -> SQM UPPERWORD SQM COMMA returned
Rule 19    content -> STRING COMMA EXPRESSION
Rule 20    returned -> TVALUE
Rule 21    returned -> EXPRESSION
Rule 22    type -> RETURN
Rule 23    type -> ERROR

Terminals, with rules where they appear

CHARACTERS           : 3 9
COMMA                : 13 18 19
EQUAL                : 3 9 11
ERROR                : 23
EXPRESSION           : 19 21
HASHTAGS             : 5
IGNORE               : 9
LEFTBRACKET          : 17
LEXMARKER            : 2
LITERALS             : 3
RE                   : 17
RETURN               : 22
RIGHTBRACKET         : 17
SLEFTBRACKET         : 11
SQM                  : 13 13 14 14 18 18
SRIGHTBRACKET        : 11
STRING               : 19
TOKENS               : 11
TVALUE               : 20
UPPERWORD            : 13 14 18
WORD                 : 7 8
error                : 

Nonterminals, with rules where they appear

comment              : 3 9 11 17
content              : 17
frase                : 0
function             : 15
functions            : 2 15
ignore               : 2
lex                  : 1
literals             : 2
returned             : 18
tokenNames           : 11 13
tokens               : 2
type                 : 17
words                : 5 7

Parsing method: LALR

state 0

    (0) S' -> . frase
    (1) frase -> . lex
    (2) lex -> . LEXMARKER literals ignore tokens functions

    LEXMARKER       shift and go to state 3

    frase                          shift and go to state 1
    lex                            shift and go to state 2

state 1

    (0) S' -> frase .



state 2

    (1) frase -> lex .

    $end            reduce using rule 1 (frase -> lex .)


state 3

    (2) lex -> LEXMARKER . literals ignore tokens functions
    (3) literals -> . LITERALS EQUAL CHARACTERS comment
    (4) literals -> .

    LITERALS        shift and go to state 5
    IGNORE          reduce using rule 4 (literals -> .)
    TOKENS          reduce using rule 4 (literals -> .)
    RE              reduce using rule 4 (literals -> .)
    $end            reduce using rule 4 (literals -> .)

    literals                       shift and go to state 4

state 4

    (2) lex -> LEXMARKER literals . ignore tokens functions
    (9) ignore -> . IGNORE EQUAL CHARACTERS comment
    (10) ignore -> .

    IGNORE          shift and go to state 7
    TOKENS          reduce using rule 10 (ignore -> .)
    RE              reduce using rule 10 (ignore -> .)
    $end            reduce using rule 10 (ignore -> .)

    ignore                         shift and go to state 6

state 5

    (3) literals -> LITERALS . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 8


state 6

    (2) lex -> LEXMARKER literals ignore . tokens functions
    (11) tokens -> . TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
    (12) tokens -> .

    TOKENS          shift and go to state 10
    RE              reduce using rule 12 (tokens -> .)
    $end            reduce using rule 12 (tokens -> .)

    tokens                         shift and go to state 9

state 7

    (9) ignore -> IGNORE . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 11


state 8

    (3) literals -> LITERALS EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 12


state 9

    (2) lex -> LEXMARKER literals ignore tokens . functions
    (15) functions -> . functions function
    (16) functions -> .

    RE              reduce using rule 16 (functions -> .)
    $end            reduce using rule 16 (functions -> .)

    functions                      shift and go to state 13

state 10

    (11) tokens -> TOKENS . EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    EQUAL           shift and go to state 14


state 11

    (9) ignore -> IGNORE EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 15


state 12

    (3) literals -> LITERALS EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 17
    IGNORE          reduce using rule 6 (comment -> .)
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 16

state 13

    (2) lex -> LEXMARKER literals ignore tokens functions .
    (15) functions -> functions . function
    (17) function -> . RE type LEFTBRACKET content RIGHTBRACKET comment

    $end            reduce using rule 2 (lex -> LEXMARKER literals ignore tokens functions .)
    RE              shift and go to state 19

    function                       shift and go to state 18

state 14

    (11) tokens -> TOKENS EQUAL . SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    SLEFTBRACKET    shift and go to state 20


state 15

    (9) ignore -> IGNORE EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 17
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 21

state 16

    (3) literals -> LITERALS EQUAL CHARACTERS comment .

    IGNORE          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    TOKENS          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    RE              reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    $end            reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)


state 17

    (5) comment -> HASHTAGS . words
    (7) words -> . words WORD
    (8) words -> . WORD

    WORD            shift and go to state 23

    words                          shift and go to state 22

state 18

    (15) functions -> functions function .

    RE              reduce using rule 15 (functions -> functions function .)
    $end            reduce using rule 15 (functions -> functions function .)


state 19

    (17) function -> RE . type LEFTBRACKET content RIGHTBRACKET comment
    (22) type -> . RETURN
    (23) type -> . ERROR

    RETURN          shift and go to state 25
    ERROR           shift and go to state 26

    type                           shift and go to state 24

state 20

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET . tokenNames SRIGHTBRACKET comment
    (13) tokenNames -> . tokenNames COMMA SQM UPPERWORD SQM
    (14) tokenNames -> . SQM UPPERWORD SQM

    SQM             shift and go to state 28

    tokenNames                     shift and go to state 27

state 21

    (9) ignore -> IGNORE EQUAL CHARACTERS comment .

    TOKENS          reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    RE              reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    $end            reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)


state 22

    (5) comment -> HASHTAGS words .
    (7) words -> words . WORD

    IGNORE          reduce using rule 5 (comment -> HASHTAGS words .)
    TOKENS          reduce using rule 5 (comment -> HASHTAGS words .)
    RE              reduce using rule 5 (comment -> HASHTAGS words .)
    $end            reduce using rule 5 (comment -> HASHTAGS words .)
    WORD            shift and go to state 29


state 23

    (8) words -> WORD .

    WORD            reduce using rule 8 (words -> WORD .)
    IGNORE          reduce using rule 8 (words -> WORD .)
    TOKENS          reduce using rule 8 (words -> WORD .)
    RE              reduce using rule 8 (words -> WORD .)
    $end            reduce using rule 8 (words -> WORD .)


state 24

    (17) function -> RE type . LEFTBRACKET content RIGHTBRACKET comment

    LEFTBRACKET     shift and go to state 30


state 25

    (22) type -> RETURN .

    LEFTBRACKET     reduce using rule 22 (type -> RETURN .)


state 26

    (23) type -> ERROR .

    LEFTBRACKET     reduce using rule 23 (type -> ERROR .)


state 27

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames . SRIGHTBRACKET comment
    (13) tokenNames -> tokenNames . COMMA SQM UPPERWORD SQM

    SRIGHTBRACKET   shift and go to state 31
    COMMA           shift and go to state 32


state 28

    (14) tokenNames -> SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 33


state 29

    (7) words -> words WORD .

    WORD            reduce using rule 7 (words -> words WORD .)
    IGNORE          reduce using rule 7 (words -> words WORD .)
    TOKENS          reduce using rule 7 (words -> words WORD .)
    RE              reduce using rule 7 (words -> words WORD .)
    $end            reduce using rule 7 (words -> words WORD .)


state 30

    (17) function -> RE type LEFTBRACKET . content RIGHTBRACKET comment
    (18) content -> . SQM UPPERWORD SQM COMMA returned
    (19) content -> . STRING COMMA EXPRESSION

    SQM             shift and go to state 35
    STRING          shift and go to state 36

    content                        shift and go to state 34

state 31

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 17
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 37

state 32

    (13) tokenNames -> tokenNames COMMA . SQM UPPERWORD SQM

    SQM             shift and go to state 38


state 33

    (14) tokenNames -> SQM UPPERWORD . SQM

    SQM             shift and go to state 39


state 34

    (17) function -> RE type LEFTBRACKET content . RIGHTBRACKET comment

    RIGHTBRACKET    shift and go to state 40


state 35

    (18) content -> SQM . UPPERWORD SQM COMMA returned

    UPPERWORD       shift and go to state 41


state 36

    (19) content -> STRING . COMMA EXPRESSION

    COMMA           shift and go to state 42


state 37

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .

    RE              reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)
    $end            reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)


state 38

    (13) tokenNames -> tokenNames COMMA SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 43


state 39

    (14) tokenNames -> SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)


state 40

    (17) function -> RE type LEFTBRACKET content RIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 17
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 44

state 41

    (18) content -> SQM UPPERWORD . SQM COMMA returned

    SQM             shift and go to state 45


state 42

    (19) content -> STRING COMMA . EXPRESSION

    EXPRESSION      shift and go to state 46


state 43

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 47


state 44

    (17) function -> RE type LEFTBRACKET content RIGHTBRACKET comment .

    RE              reduce using rule 17 (function -> RE type LEFTBRACKET content RIGHTBRACKET comment .)
    $end            reduce using rule 17 (function -> RE type LEFTBRACKET content RIGHTBRACKET comment .)


state 45

    (18) content -> SQM UPPERWORD SQM . COMMA returned

    COMMA           shift and go to state 48


state 46

    (19) content -> STRING COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 19 (content -> STRING COMMA EXPRESSION .)


state 47

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)


state 48

    (18) content -> SQM UPPERWORD SQM COMMA . returned
    (20) returned -> . TVALUE
    (21) returned -> . EXPRESSION

    TVALUE          shift and go to state 50
    EXPRESSION      shift and go to state 51

    returned                       shift and go to state 49

state 49

    (18) content -> SQM UPPERWORD SQM COMMA returned .

    RIGHTBRACKET    reduce using rule 18 (content -> SQM UPPERWORD SQM COMMA returned .)


state 50

    (20) returned -> TVALUE .

    RIGHTBRACKET    reduce using rule 20 (returned -> TVALUE .)


state 51

    (21) returned -> EXPRESSION .

    RIGHTBRACKET    reduce using rule 21 (returned -> EXPRESSION .)

