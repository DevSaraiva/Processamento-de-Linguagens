Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DEF
    INITVAR
    NAMEFUNC
    NAMEPROD
    NAMEVAR

Grammar

Rule 0     S' -> phrase
Rule 1     phrase -> lex yacc
Rule 2     lex -> LEXMARKER literals ignore tokens functions
Rule 3     literals -> LITERALS EQUAL CHARACTERS comment
Rule 4     literals -> <empty>
Rule 5     comment -> HASHTAGS words NEWLINE
Rule 6     comment -> <empty>
Rule 7     words -> words WORD
Rule 8     words -> WORD
Rule 9     ignore -> IGNORE EQUAL CHARACTERS comment
Rule 10    ignore -> <empty>
Rule 11    tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
Rule 12    tokens -> <empty>
Rule 13    tokenNames -> tokenNames COMMA SQM UPPERWORD SQM
Rule 14    tokenNames -> SQM UPPERWORD SQM
Rule 15    functions -> functions function
Rule 16    functions -> <empty>
Rule 17    function -> RE LEFTBRACKET content RIGHTBRACKET comment
Rule 18    content -> SQM UPPERWORD SQM COMMA EXPRESSION
Rule 19    content -> SQM UPPERWORD SQM COMMA WORD
Rule 20    content -> STRING COMMA EXPRESSION
Rule 21    content -> CHARACTERS COMMA EXPRESSION
Rule 22    yacc -> YACCMARKER precedence comment vars PERCENTAGE functionsyacc INITYACC parse
Rule 23    precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET
Rule 24    precedence -> <empty>
Rule 25    precedences -> precedences tokenprecedence
Rule 26    precedences -> <empty>
Rule 27    tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA
Rule 28    rl -> SQM RIGHT SQM
Rule 29    rl -> SQM LEFT SQM
Rule 30    nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM
Rule 31    nametokensprec -> nametokensprec COMMA SQM CHAR SQM
Rule 32    nametokensprec -> SQM CHAR SQM
Rule 33    nametokensprec -> SQM UPPERWORD SQM
Rule 34    vars -> WORD EQUAL LEFTCOTTER RIGHTCOTTER
Rule 35    vars -> <empty>
Rule 36    prods -> WORD COLON EXPGRAM LEFTCOTTER RETURNEDPRODS RIGHTCOTTER
Rule 37    functionsyacc -> functionsyacc functionyacc
Rule 38    functionsyacc -> <empty>
Rule 39    functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL
Rule 40    bodyfunction -> bodyfunction BODYFUNCTIONLINE
Rule 41    bodyfunction -> <empty>
Rule 42    parse -> PARSEYACC LEFTBRACKET CHARACTERS RIGHTBRACKET

Terminals, with rules where they appear

BODYFUNCTIONFINAL    : 39
BODYFUNCTIONLINE     : 39 40
CHAR                 : 31 32
CHARACTERS           : 3 9 21 42
COLON                : 36
COMMA                : 13 18 19 20 21 27 27 30 31
DEF                  : 
EQUAL                : 3 9 11 23 34
EXPGRAM              : 36
EXPRESSION           : 18 20 21
FUNCTION             : 39
HASHTAGS             : 5
IGNORE               : 9
INITVAR              : 
INITYACC             : 22
LEFT                 : 29
LEFTBRACKET          : 17 27 42
LEFTCOTTER           : 34 36
LEXMARKER            : 2
LITERALS             : 3
NAMEFUNC             : 
NAMEPROD             : 
NAMEVAR              : 
NEWLINE              : 5
PARSEYACC            : 42
PERCENTAGE           : 22
PRECEDENCE           : 23
RE                   : 17
RETURNEDPRODS        : 36
RIGHT                : 28
RIGHTBRACKET         : 17 27 42
RIGHTCOTTER          : 34 36
SLEFTBRACKET         : 11 23
SQM                  : 13 13 14 14 18 18 19 19 28 28 29 29 30 30 31 31 32 32 33 33
SRIGHTBRACKET        : 11 23
STRING               : 20
TOKENS               : 11
UPPERWORD            : 13 14 18 19 30 33
WORD                 : 7 8 19 34 36
YACCMARKER           : 22
error                : 

Nonterminals, with rules where they appear

bodyfunction         : 39 40
comment              : 3 9 11 17 22
content              : 17
function             : 15
functions            : 2 15
functionsyacc        : 22 37
functionyacc         : 37
ignore               : 2
lex                  : 1
literals             : 2
nametokensprec       : 27 30 31
parse                : 22
phrase               : 0
precedence           : 22
precedences          : 23 25
prods                : 
rl                   : 27
tokenNames           : 11 13
tokenprecedence      : 25
tokens               : 2
vars                 : 22
words                : 5 7
yacc                 : 1

Parsing method: LALR

state 0

    (0) S' -> . phrase
    (1) phrase -> . lex yacc
    (2) lex -> . LEXMARKER literals ignore tokens functions

    LEXMARKER       shift and go to state 3

    phrase                         shift and go to state 1
    lex                            shift and go to state 2

state 1

    (0) S' -> phrase .



state 2

    (1) phrase -> lex . yacc
    (22) yacc -> . YACCMARKER precedence comment vars PERCENTAGE functionsyacc INITYACC parse

    YACCMARKER      shift and go to state 5

    yacc                           shift and go to state 4

state 3

    (2) lex -> LEXMARKER . literals ignore tokens functions
    (3) literals -> . LITERALS EQUAL CHARACTERS comment
    (4) literals -> .

    LITERALS        shift and go to state 7
    IGNORE          reduce using rule 4 (literals -> .)
    TOKENS          reduce using rule 4 (literals -> .)
    RE              reduce using rule 4 (literals -> .)
    YACCMARKER      reduce using rule 4 (literals -> .)

    literals                       shift and go to state 6

state 4

    (1) phrase -> lex yacc .

    $end            reduce using rule 1 (phrase -> lex yacc .)


state 5

    (22) yacc -> YACCMARKER . precedence comment vars PERCENTAGE functionsyacc INITYACC parse
    (23) precedence -> . PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET
    (24) precedence -> .

    PRECEDENCE      shift and go to state 9
    HASHTAGS        reduce using rule 24 (precedence -> .)
    WORD            reduce using rule 24 (precedence -> .)
    PERCENTAGE      reduce using rule 24 (precedence -> .)

    precedence                     shift and go to state 8

state 6

    (2) lex -> LEXMARKER literals . ignore tokens functions
    (9) ignore -> . IGNORE EQUAL CHARACTERS comment
    (10) ignore -> .

    IGNORE          shift and go to state 11
    TOKENS          reduce using rule 10 (ignore -> .)
    RE              reduce using rule 10 (ignore -> .)
    YACCMARKER      reduce using rule 10 (ignore -> .)

    ignore                         shift and go to state 10

state 7

    (3) literals -> LITERALS . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 12


state 8

    (22) yacc -> YACCMARKER precedence . comment vars PERCENTAGE functionsyacc INITYACC parse
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    WORD            reduce using rule 6 (comment -> .)
    PERCENTAGE      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 13

state 9

    (23) precedence -> PRECEDENCE . EQUAL SLEFTBRACKET precedences SRIGHTBRACKET

    EQUAL           shift and go to state 15


state 10

    (2) lex -> LEXMARKER literals ignore . tokens functions
    (11) tokens -> . TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
    (12) tokens -> .

    TOKENS          shift and go to state 17
    RE              reduce using rule 12 (tokens -> .)
    YACCMARKER      reduce using rule 12 (tokens -> .)

    tokens                         shift and go to state 16

state 11

    (9) ignore -> IGNORE . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 18


state 12

    (3) literals -> LITERALS EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 19


state 13

    (22) yacc -> YACCMARKER precedence comment . vars PERCENTAGE functionsyacc INITYACC parse
    (34) vars -> . WORD EQUAL LEFTCOTTER RIGHTCOTTER
    (35) vars -> .

    WORD            shift and go to state 21
    PERCENTAGE      reduce using rule 35 (vars -> .)

    vars                           shift and go to state 20

state 14

    (5) comment -> HASHTAGS . words NEWLINE
    (7) words -> . words WORD
    (8) words -> . WORD

    WORD            shift and go to state 23

    words                          shift and go to state 22

state 15

    (23) precedence -> PRECEDENCE EQUAL . SLEFTBRACKET precedences SRIGHTBRACKET

    SLEFTBRACKET    shift and go to state 24


state 16

    (2) lex -> LEXMARKER literals ignore tokens . functions
    (15) functions -> . functions function
    (16) functions -> .

    RE              reduce using rule 16 (functions -> .)
    YACCMARKER      reduce using rule 16 (functions -> .)

    functions                      shift and go to state 25

state 17

    (11) tokens -> TOKENS . EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    EQUAL           shift and go to state 26


state 18

    (9) ignore -> IGNORE EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 27


state 19

    (3) literals -> LITERALS EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    IGNORE          reduce using rule 6 (comment -> .)
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 28

state 20

    (22) yacc -> YACCMARKER precedence comment vars . PERCENTAGE functionsyacc INITYACC parse

    PERCENTAGE      shift and go to state 29


state 21

    (34) vars -> WORD . EQUAL LEFTCOTTER RIGHTCOTTER

    EQUAL           shift and go to state 30


state 22

    (5) comment -> HASHTAGS words . NEWLINE
    (7) words -> words . WORD

    NEWLINE         shift and go to state 31
    WORD            shift and go to state 32


state 23

    (8) words -> WORD .

    NEWLINE         reduce using rule 8 (words -> WORD .)
    WORD            reduce using rule 8 (words -> WORD .)


state 24

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET . precedences SRIGHTBRACKET
    (25) precedences -> . precedences tokenprecedence
    (26) precedences -> .

    SRIGHTBRACKET   reduce using rule 26 (precedences -> .)
    LEFTBRACKET     reduce using rule 26 (precedences -> .)

    precedences                    shift and go to state 33

state 25

    (2) lex -> LEXMARKER literals ignore tokens functions .
    (15) functions -> functions . function
    (17) function -> . RE LEFTBRACKET content RIGHTBRACKET comment

    YACCMARKER      reduce using rule 2 (lex -> LEXMARKER literals ignore tokens functions .)
    RE              shift and go to state 35

    function                       shift and go to state 34

state 26

    (11) tokens -> TOKENS EQUAL . SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    SLEFTBRACKET    shift and go to state 36


state 27

    (9) ignore -> IGNORE EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 37

state 28

    (3) literals -> LITERALS EQUAL CHARACTERS comment .

    IGNORE          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    TOKENS          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    RE              reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    YACCMARKER      reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)


state 29

    (22) yacc -> YACCMARKER precedence comment vars PERCENTAGE . functionsyacc INITYACC parse
    (37) functionsyacc -> . functionsyacc functionyacc
    (38) functionsyacc -> .

    INITYACC        reduce using rule 38 (functionsyacc -> .)
    FUNCTION        reduce using rule 38 (functionsyacc -> .)

    functionsyacc                  shift and go to state 38

state 30

    (34) vars -> WORD EQUAL . LEFTCOTTER RIGHTCOTTER

    LEFTCOTTER      shift and go to state 39


state 31

    (5) comment -> HASHTAGS words NEWLINE .

    WORD            reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    PERCENTAGE      reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    IGNORE          reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    TOKENS          reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    RE              reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    YACCMARKER      reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)


state 32

    (7) words -> words WORD .

    NEWLINE         reduce using rule 7 (words -> words WORD .)
    WORD            reduce using rule 7 (words -> words WORD .)


state 33

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences . SRIGHTBRACKET
    (25) precedences -> precedences . tokenprecedence
    (27) tokenprecedence -> . LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA

    SRIGHTBRACKET   shift and go to state 40
    LEFTBRACKET     shift and go to state 42

    tokenprecedence                shift and go to state 41

state 34

    (15) functions -> functions function .

    RE              reduce using rule 15 (functions -> functions function .)
    YACCMARKER      reduce using rule 15 (functions -> functions function .)


state 35

    (17) function -> RE . LEFTBRACKET content RIGHTBRACKET comment

    LEFTBRACKET     shift and go to state 43


state 36

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET . tokenNames SRIGHTBRACKET comment
    (13) tokenNames -> . tokenNames COMMA SQM UPPERWORD SQM
    (14) tokenNames -> . SQM UPPERWORD SQM

    SQM             shift and go to state 45

    tokenNames                     shift and go to state 44

state 37

    (9) ignore -> IGNORE EQUAL CHARACTERS comment .

    TOKENS          reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    RE              reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    YACCMARKER      reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)


state 38

    (22) yacc -> YACCMARKER precedence comment vars PERCENTAGE functionsyacc . INITYACC parse
    (37) functionsyacc -> functionsyacc . functionyacc
    (39) functionyacc -> . FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL

    INITYACC        shift and go to state 46
    FUNCTION        shift and go to state 48

    functionyacc                   shift and go to state 47

state 39

    (34) vars -> WORD EQUAL LEFTCOTTER . RIGHTCOTTER

    RIGHTCOTTER     shift and go to state 49


state 40

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .

    HASHTAGS        reduce using rule 23 (precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .)
    WORD            reduce using rule 23 (precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .)
    PERCENTAGE      reduce using rule 23 (precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .)


state 41

    (25) precedences -> precedences tokenprecedence .

    SRIGHTBRACKET   reduce using rule 25 (precedences -> precedences tokenprecedence .)
    LEFTBRACKET     reduce using rule 25 (precedences -> precedences tokenprecedence .)


state 42

    (27) tokenprecedence -> LEFTBRACKET . rl COMMA nametokensprec RIGHTBRACKET COMMA
    (28) rl -> . SQM RIGHT SQM
    (29) rl -> . SQM LEFT SQM

    SQM             shift and go to state 51

    rl                             shift and go to state 50

state 43

    (17) function -> RE LEFTBRACKET . content RIGHTBRACKET comment
    (18) content -> . SQM UPPERWORD SQM COMMA EXPRESSION
    (19) content -> . SQM UPPERWORD SQM COMMA WORD
    (20) content -> . STRING COMMA EXPRESSION
    (21) content -> . CHARACTERS COMMA EXPRESSION

    SQM             shift and go to state 53
    STRING          shift and go to state 54
    CHARACTERS      shift and go to state 55

    content                        shift and go to state 52

state 44

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames . SRIGHTBRACKET comment
    (13) tokenNames -> tokenNames . COMMA SQM UPPERWORD SQM

    SRIGHTBRACKET   shift and go to state 56
    COMMA           shift and go to state 57


state 45

    (14) tokenNames -> SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 58


state 46

    (22) yacc -> YACCMARKER precedence comment vars PERCENTAGE functionsyacc INITYACC . parse
    (42) parse -> . PARSEYACC LEFTBRACKET CHARACTERS RIGHTBRACKET

    PARSEYACC       shift and go to state 60

    parse                          shift and go to state 59

state 47

    (37) functionsyacc -> functionsyacc functionyacc .

    INITYACC        reduce using rule 37 (functionsyacc -> functionsyacc functionyacc .)
    FUNCTION        reduce using rule 37 (functionsyacc -> functionsyacc functionyacc .)


state 48

    (39) functionyacc -> FUNCTION . BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL

    BODYFUNCTIONLINE shift and go to state 61


state 49

    (34) vars -> WORD EQUAL LEFTCOTTER RIGHTCOTTER .

    PERCENTAGE      reduce using rule 34 (vars -> WORD EQUAL LEFTCOTTER RIGHTCOTTER .)


state 50

    (27) tokenprecedence -> LEFTBRACKET rl . COMMA nametokensprec RIGHTBRACKET COMMA

    COMMA           shift and go to state 62


state 51

    (28) rl -> SQM . RIGHT SQM
    (29) rl -> SQM . LEFT SQM

    RIGHT           shift and go to state 63
    LEFT            shift and go to state 64


state 52

    (17) function -> RE LEFTBRACKET content . RIGHTBRACKET comment

    RIGHTBRACKET    shift and go to state 65


state 53

    (18) content -> SQM . UPPERWORD SQM COMMA EXPRESSION
    (19) content -> SQM . UPPERWORD SQM COMMA WORD

    UPPERWORD       shift and go to state 66


state 54

    (20) content -> STRING . COMMA EXPRESSION

    COMMA           shift and go to state 67


state 55

    (21) content -> CHARACTERS . COMMA EXPRESSION

    COMMA           shift and go to state 68


state 56

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 69

state 57

    (13) tokenNames -> tokenNames COMMA . SQM UPPERWORD SQM

    SQM             shift and go to state 70


state 58

    (14) tokenNames -> SQM UPPERWORD . SQM

    SQM             shift and go to state 71


state 59

    (22) yacc -> YACCMARKER precedence comment vars PERCENTAGE functionsyacc INITYACC parse .

    $end            reduce using rule 22 (yacc -> YACCMARKER precedence comment vars PERCENTAGE functionsyacc INITYACC parse .)


state 60

    (42) parse -> PARSEYACC . LEFTBRACKET CHARACTERS RIGHTBRACKET

    LEFTBRACKET     shift and go to state 72


state 61

    (39) functionyacc -> FUNCTION BODYFUNCTIONLINE . bodyfunction BODYFUNCTIONFINAL
    (40) bodyfunction -> . bodyfunction BODYFUNCTIONLINE
    (41) bodyfunction -> .

    BODYFUNCTIONFINAL reduce using rule 41 (bodyfunction -> .)
    BODYFUNCTIONLINE reduce using rule 41 (bodyfunction -> .)

    bodyfunction                   shift and go to state 73

state 62

    (27) tokenprecedence -> LEFTBRACKET rl COMMA . nametokensprec RIGHTBRACKET COMMA
    (30) nametokensprec -> . nametokensprec COMMA SQM UPPERWORD SQM
    (31) nametokensprec -> . nametokensprec COMMA SQM CHAR SQM
    (32) nametokensprec -> . SQM CHAR SQM
    (33) nametokensprec -> . SQM UPPERWORD SQM

    SQM             shift and go to state 75

    nametokensprec                 shift and go to state 74

state 63

    (28) rl -> SQM RIGHT . SQM

    SQM             shift and go to state 76


state 64

    (29) rl -> SQM LEFT . SQM

    SQM             shift and go to state 77


state 65

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 78

state 66

    (18) content -> SQM UPPERWORD . SQM COMMA EXPRESSION
    (19) content -> SQM UPPERWORD . SQM COMMA WORD

    SQM             shift and go to state 79


state 67

    (20) content -> STRING COMMA . EXPRESSION

    EXPRESSION      shift and go to state 80


state 68

    (21) content -> CHARACTERS COMMA . EXPRESSION

    EXPRESSION      shift and go to state 81


state 69

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .

    RE              reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)
    YACCMARKER      reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)


state 70

    (13) tokenNames -> tokenNames COMMA SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 82


state 71

    (14) tokenNames -> SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)


state 72

    (42) parse -> PARSEYACC LEFTBRACKET . CHARACTERS RIGHTBRACKET

    CHARACTERS      shift and go to state 83


state 73

    (39) functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction . BODYFUNCTIONFINAL
    (40) bodyfunction -> bodyfunction . BODYFUNCTIONLINE

    BODYFUNCTIONFINAL shift and go to state 85
    BODYFUNCTIONLINE shift and go to state 84


state 74

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec . RIGHTBRACKET COMMA
    (30) nametokensprec -> nametokensprec . COMMA SQM UPPERWORD SQM
    (31) nametokensprec -> nametokensprec . COMMA SQM CHAR SQM

    RIGHTBRACKET    shift and go to state 87
    COMMA           shift and go to state 86


state 75

    (32) nametokensprec -> SQM . CHAR SQM
    (33) nametokensprec -> SQM . UPPERWORD SQM

    CHAR            shift and go to state 88
    UPPERWORD       shift and go to state 89


state 76

    (28) rl -> SQM RIGHT SQM .

    COMMA           reduce using rule 28 (rl -> SQM RIGHT SQM .)


state 77

    (29) rl -> SQM LEFT SQM .

    COMMA           reduce using rule 29 (rl -> SQM LEFT SQM .)


state 78

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET comment .

    RE              reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)
    YACCMARKER      reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)


state 79

    (18) content -> SQM UPPERWORD SQM . COMMA EXPRESSION
    (19) content -> SQM UPPERWORD SQM . COMMA WORD

    COMMA           shift and go to state 90


state 80

    (20) content -> STRING COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 20 (content -> STRING COMMA EXPRESSION .)


state 81

    (21) content -> CHARACTERS COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 21 (content -> CHARACTERS COMMA EXPRESSION .)


state 82

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 91


state 83

    (42) parse -> PARSEYACC LEFTBRACKET CHARACTERS . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 92


state 84

    (40) bodyfunction -> bodyfunction BODYFUNCTIONLINE .

    BODYFUNCTIONFINAL reduce using rule 40 (bodyfunction -> bodyfunction BODYFUNCTIONLINE .)
    BODYFUNCTIONLINE reduce using rule 40 (bodyfunction -> bodyfunction BODYFUNCTIONLINE .)


state 85

    (39) functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL .

    INITYACC        reduce using rule 39 (functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL .)
    FUNCTION        reduce using rule 39 (functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL .)


state 86

    (30) nametokensprec -> nametokensprec COMMA . SQM UPPERWORD SQM
    (31) nametokensprec -> nametokensprec COMMA . SQM CHAR SQM

    SQM             shift and go to state 93


state 87

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET . COMMA

    COMMA           shift and go to state 94


state 88

    (32) nametokensprec -> SQM CHAR . SQM

    SQM             shift and go to state 95


state 89

    (33) nametokensprec -> SQM UPPERWORD . SQM

    SQM             shift and go to state 96


state 90

    (18) content -> SQM UPPERWORD SQM COMMA . EXPRESSION
    (19) content -> SQM UPPERWORD SQM COMMA . WORD

    EXPRESSION      shift and go to state 97
    WORD            shift and go to state 98


state 91

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)


state 92

    (42) parse -> PARSEYACC LEFTBRACKET CHARACTERS RIGHTBRACKET .

    $end            reduce using rule 42 (parse -> PARSEYACC LEFTBRACKET CHARACTERS RIGHTBRACKET .)


state 93

    (30) nametokensprec -> nametokensprec COMMA SQM . UPPERWORD SQM
    (31) nametokensprec -> nametokensprec COMMA SQM . CHAR SQM

    UPPERWORD       shift and go to state 99
    CHAR            shift and go to state 100


state 94

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .

    SRIGHTBRACKET   reduce using rule 27 (tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .)
    LEFTBRACKET     reduce using rule 27 (tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .)


state 95

    (32) nametokensprec -> SQM CHAR SQM .

    RIGHTBRACKET    reduce using rule 32 (nametokensprec -> SQM CHAR SQM .)
    COMMA           reduce using rule 32 (nametokensprec -> SQM CHAR SQM .)


state 96

    (33) nametokensprec -> SQM UPPERWORD SQM .

    RIGHTBRACKET    reduce using rule 33 (nametokensprec -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 33 (nametokensprec -> SQM UPPERWORD SQM .)


state 97

    (18) content -> SQM UPPERWORD SQM COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 18 (content -> SQM UPPERWORD SQM COMMA EXPRESSION .)


state 98

    (19) content -> SQM UPPERWORD SQM COMMA WORD .

    RIGHTBRACKET    reduce using rule 19 (content -> SQM UPPERWORD SQM COMMA WORD .)


state 99

    (30) nametokensprec -> nametokensprec COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 101


state 100

    (31) nametokensprec -> nametokensprec COMMA SQM CHAR . SQM

    SQM             shift and go to state 102


state 101

    (30) nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .

    RIGHTBRACKET    reduce using rule 30 (nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 30 (nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .)


state 102

    (31) nametokensprec -> nametokensprec COMMA SQM CHAR SQM .

    RIGHTBRACKET    reduce using rule 31 (nametokensprec -> nametokensprec COMMA SQM CHAR SQM .)
    COMMA           reduce using rule 31 (nametokensprec -> nametokensprec COMMA SQM CHAR SQM .)

