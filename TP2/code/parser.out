Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    DEF
    EXPGRAM
    INITVAR
    LITERAL
    NAMEFUNC
    NAMEPROD
    NAMEVAR
    PARSEYACC
    RETURNEDPRODS

Grammar

Rule 0     S' -> phrase
Rule 1     phrase -> lex yacc
Rule 2     lex -> LEXMARKER literals ignore tokens functions
Rule 3     literals -> LITERALS EQUAL CHARACTERS comment
Rule 4     literals -> <empty>
Rule 5     comment -> HASHTAGS words NEWLINE
Rule 6     comment -> <empty>
Rule 7     words -> words WORD
Rule 8     words -> WORD
Rule 9     ignore -> IGNORE EQUAL CHARACTERS comment
Rule 10    ignore -> <empty>
Rule 11    tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
Rule 12    tokens -> <empty>
Rule 13    tokenNames -> tokenNames COMMA SQM UPPERWORD SQM
Rule 14    tokenNames -> SQM UPPERWORD SQM
Rule 15    functions -> functions function
Rule 16    functions -> <empty>
Rule 17    function -> RE LEFTBRACKET content RIGHTBRACKET comment
Rule 18    content -> SQM UPPERWORD SQM COMMA EXPRESSION
Rule 19    content -> SQM UPPERWORD SQM COMMA WORD
Rule 20    content -> STRING COMMA EXPRESSION
Rule 21    content -> CHARACTERS COMMA EXPRESSION
Rule 22    yacc -> YACCMARKER precedence comment vars prods PERCENTAGE functionsyacc inityacc parse
Rule 23    precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET
Rule 24    precedence -> <empty>
Rule 25    precedences -> precedences tokenprecedence
Rule 26    precedences -> <empty>
Rule 27    tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA
Rule 28    rl -> SQM RIGHT SQM
Rule 29    rl -> SQM LEFT SQM
Rule 30    nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM
Rule 31    nametokensprec -> nametokensprec COMMA SQM CHAR SQM
Rule 32    nametokensprec -> SQM CHAR SQM
Rule 33    nametokensprec -> SQM UPPERWORD SQM
Rule 34    vars -> WORD EQUAL LEFTCOTTER RIGHTCOTTER
Rule 35    prods -> prods prod
Rule 36    prods -> <empty>
Rule 37    prod -> WORD WORD expProd LEFTCOTTER CHARS RIGHTCOTTER
Rule 38    expProd -> expProd UPPERWORD
Rule 39    expProd -> expProd WORD
Rule 40    expProd -> expProd SQM CHAR SQM
Rule 41    expProd -> expProd SQM EQUAL SQM
Rule 42    expProd -> expProd SQM LEFTBRACKET SQM
Rule 43    expProd -> expProd SQM RIGHTBRACKET SQM
Rule 44    expProd -> expProd markerPrec
Rule 45    expProd -> <empty>
Rule 46    markerPrec -> PRECTAG UPPERWORD
Rule 47    functionsyacc -> functionsyacc functionyacc
Rule 48    functionsyacc -> <empty>
Rule 49    functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL
Rule 50    bodyfunction -> bodyfunction BODYFUNCTIONLINE
Rule 51    bodyfunction -> <empty>
Rule 52    parse -> WORD LEFTBRACKET CHARACTERS RIGHTBRACKET
Rule 53    inityacc -> WORD EQUAL INITYACC

Terminals, with rules where they appear

BODYFUNCTIONFINAL    : 49
BODYFUNCTIONLINE     : 49 50
CHAR                 : 31 32 40
CHARACTERS           : 3 9 21 52
CHARS                : 37
COLON                : 
COMMA                : 13 18 19 20 21 27 27 30 31
DEF                  : 
EQUAL                : 3 9 11 23 34 41 53
EXPGRAM              : 
EXPRESSION           : 18 20 21
FUNCTION             : 49
HASHTAGS             : 5
IGNORE               : 9
INITVAR              : 
INITYACC             : 53
LEFT                 : 29
LEFTBRACKET          : 17 27 42 52
LEFTCOTTER           : 34 37
LEXMARKER            : 2
LITERAL              : 
LITERALS             : 3
NAMEFUNC             : 
NAMEPROD             : 
NAMEVAR              : 
NEWLINE              : 5
PARSEYACC            : 
PERCENTAGE           : 22
PRECEDENCE           : 23
PRECTAG              : 46
RE                   : 17
RETURNEDPRODS        : 
RIGHT                : 28
RIGHTBRACKET         : 17 27 43 52
RIGHTCOTTER          : 34 37
SLEFTBRACKET         : 11 23
SQM                  : 13 13 14 14 18 18 19 19 28 28 29 29 30 30 31 31 32 32 33 33 40 40 41 41 42 42 43 43
SRIGHTBRACKET        : 11 23
STRING               : 20
TOKENS               : 11
UPPERWORD            : 13 14 18 19 30 33 38 46
WORD                 : 7 8 19 34 37 37 39 52 53
YACCMARKER           : 22
error                : 

Nonterminals, with rules where they appear

bodyfunction         : 49 50
comment              : 3 9 11 17 22
content              : 17
expProd              : 37 38 39 40 41 42 43 44
function             : 15
functions            : 2 15
functionsyacc        : 22 47
functionyacc         : 47
ignore               : 2
inityacc             : 22
lex                  : 1
literals             : 2
markerPrec           : 44
nametokensprec       : 27 30 31
parse                : 22
phrase               : 0
precedence           : 22
precedences          : 23 25
prod                 : 35
prods                : 22 35
rl                   : 27
tokenNames           : 11 13
tokenprecedence      : 25
tokens               : 2
vars                 : 22
words                : 5 7
yacc                 : 1

Parsing method: LALR

state 0

    (0) S' -> . phrase
    (1) phrase -> . lex yacc
    (2) lex -> . LEXMARKER literals ignore tokens functions

    LEXMARKER       shift and go to state 3

    phrase                         shift and go to state 1
    lex                            shift and go to state 2

state 1

    (0) S' -> phrase .



state 2

    (1) phrase -> lex . yacc
    (22) yacc -> . YACCMARKER precedence comment vars prods PERCENTAGE functionsyacc inityacc parse

    YACCMARKER      shift and go to state 5

    yacc                           shift and go to state 4

state 3

    (2) lex -> LEXMARKER . literals ignore tokens functions
    (3) literals -> . LITERALS EQUAL CHARACTERS comment
    (4) literals -> .

    LITERALS        shift and go to state 7
    IGNORE          reduce using rule 4 (literals -> .)
    TOKENS          reduce using rule 4 (literals -> .)
    RE              reduce using rule 4 (literals -> .)
    YACCMARKER      reduce using rule 4 (literals -> .)

    literals                       shift and go to state 6

state 4

    (1) phrase -> lex yacc .

    $end            reduce using rule 1 (phrase -> lex yacc .)


state 5

    (22) yacc -> YACCMARKER . precedence comment vars prods PERCENTAGE functionsyacc inityacc parse
    (23) precedence -> . PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET
    (24) precedence -> .

    PRECEDENCE      shift and go to state 9
    HASHTAGS        reduce using rule 24 (precedence -> .)
    WORD            reduce using rule 24 (precedence -> .)

    precedence                     shift and go to state 8

state 6

    (2) lex -> LEXMARKER literals . ignore tokens functions
    (9) ignore -> . IGNORE EQUAL CHARACTERS comment
    (10) ignore -> .

    IGNORE          shift and go to state 11
    TOKENS          reduce using rule 10 (ignore -> .)
    RE              reduce using rule 10 (ignore -> .)
    YACCMARKER      reduce using rule 10 (ignore -> .)

    ignore                         shift and go to state 10

state 7

    (3) literals -> LITERALS . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 12


state 8

    (22) yacc -> YACCMARKER precedence . comment vars prods PERCENTAGE functionsyacc inityacc parse
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    WORD            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 13

state 9

    (23) precedence -> PRECEDENCE . EQUAL SLEFTBRACKET precedences SRIGHTBRACKET

    EQUAL           shift and go to state 15


state 10

    (2) lex -> LEXMARKER literals ignore . tokens functions
    (11) tokens -> . TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
    (12) tokens -> .

    TOKENS          shift and go to state 17
    RE              reduce using rule 12 (tokens -> .)
    YACCMARKER      reduce using rule 12 (tokens -> .)

    tokens                         shift and go to state 16

state 11

    (9) ignore -> IGNORE . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 18


state 12

    (3) literals -> LITERALS EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 19


state 13

    (22) yacc -> YACCMARKER precedence comment . vars prods PERCENTAGE functionsyacc inityacc parse
    (34) vars -> . WORD EQUAL LEFTCOTTER RIGHTCOTTER

    WORD            shift and go to state 21

    vars                           shift and go to state 20

state 14

    (5) comment -> HASHTAGS . words NEWLINE
    (7) words -> . words WORD
    (8) words -> . WORD

    WORD            shift and go to state 23

    words                          shift and go to state 22

state 15

    (23) precedence -> PRECEDENCE EQUAL . SLEFTBRACKET precedences SRIGHTBRACKET

    SLEFTBRACKET    shift and go to state 24


state 16

    (2) lex -> LEXMARKER literals ignore tokens . functions
    (15) functions -> . functions function
    (16) functions -> .

    RE              reduce using rule 16 (functions -> .)
    YACCMARKER      reduce using rule 16 (functions -> .)

    functions                      shift and go to state 25

state 17

    (11) tokens -> TOKENS . EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    EQUAL           shift and go to state 26


state 18

    (9) ignore -> IGNORE EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 27


state 19

    (3) literals -> LITERALS EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    IGNORE          reduce using rule 6 (comment -> .)
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 28

state 20

    (22) yacc -> YACCMARKER precedence comment vars . prods PERCENTAGE functionsyacc inityacc parse
    (35) prods -> . prods prod
    (36) prods -> .

    PERCENTAGE      reduce using rule 36 (prods -> .)
    WORD            reduce using rule 36 (prods -> .)

    prods                          shift and go to state 29

state 21

    (34) vars -> WORD . EQUAL LEFTCOTTER RIGHTCOTTER

    EQUAL           shift and go to state 30


state 22

    (5) comment -> HASHTAGS words . NEWLINE
    (7) words -> words . WORD

    NEWLINE         shift and go to state 31
    WORD            shift and go to state 32


state 23

    (8) words -> WORD .

    NEWLINE         reduce using rule 8 (words -> WORD .)
    WORD            reduce using rule 8 (words -> WORD .)


state 24

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET . precedences SRIGHTBRACKET
    (25) precedences -> . precedences tokenprecedence
    (26) precedences -> .

    SRIGHTBRACKET   reduce using rule 26 (precedences -> .)
    LEFTBRACKET     reduce using rule 26 (precedences -> .)

    precedences                    shift and go to state 33

state 25

    (2) lex -> LEXMARKER literals ignore tokens functions .
    (15) functions -> functions . function
    (17) function -> . RE LEFTBRACKET content RIGHTBRACKET comment

    YACCMARKER      reduce using rule 2 (lex -> LEXMARKER literals ignore tokens functions .)
    RE              shift and go to state 35

    function                       shift and go to state 34

state 26

    (11) tokens -> TOKENS EQUAL . SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    SLEFTBRACKET    shift and go to state 36


state 27

    (9) ignore -> IGNORE EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 37

state 28

    (3) literals -> LITERALS EQUAL CHARACTERS comment .

    IGNORE          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    TOKENS          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    RE              reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    YACCMARKER      reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)


state 29

    (22) yacc -> YACCMARKER precedence comment vars prods . PERCENTAGE functionsyacc inityacc parse
    (35) prods -> prods . prod
    (37) prod -> . WORD WORD expProd LEFTCOTTER CHARS RIGHTCOTTER

    PERCENTAGE      shift and go to state 38
    WORD            shift and go to state 40

    prod                           shift and go to state 39

state 30

    (34) vars -> WORD EQUAL . LEFTCOTTER RIGHTCOTTER

    LEFTCOTTER      shift and go to state 41


state 31

    (5) comment -> HASHTAGS words NEWLINE .

    WORD            reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    IGNORE          reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    TOKENS          reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    RE              reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)
    YACCMARKER      reduce using rule 5 (comment -> HASHTAGS words NEWLINE .)


state 32

    (7) words -> words WORD .

    NEWLINE         reduce using rule 7 (words -> words WORD .)
    WORD            reduce using rule 7 (words -> words WORD .)


state 33

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences . SRIGHTBRACKET
    (25) precedences -> precedences . tokenprecedence
    (27) tokenprecedence -> . LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA

    SRIGHTBRACKET   shift and go to state 42
    LEFTBRACKET     shift and go to state 44

    tokenprecedence                shift and go to state 43

state 34

    (15) functions -> functions function .

    RE              reduce using rule 15 (functions -> functions function .)
    YACCMARKER      reduce using rule 15 (functions -> functions function .)


state 35

    (17) function -> RE . LEFTBRACKET content RIGHTBRACKET comment

    LEFTBRACKET     shift and go to state 45


state 36

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET . tokenNames SRIGHTBRACKET comment
    (13) tokenNames -> . tokenNames COMMA SQM UPPERWORD SQM
    (14) tokenNames -> . SQM UPPERWORD SQM

    SQM             shift and go to state 47

    tokenNames                     shift and go to state 46

state 37

    (9) ignore -> IGNORE EQUAL CHARACTERS comment .

    TOKENS          reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    RE              reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    YACCMARKER      reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)


state 38

    (22) yacc -> YACCMARKER precedence comment vars prods PERCENTAGE . functionsyacc inityacc parse
    (47) functionsyacc -> . functionsyacc functionyacc
    (48) functionsyacc -> .

    WORD            reduce using rule 48 (functionsyacc -> .)
    FUNCTION        reduce using rule 48 (functionsyacc -> .)

    functionsyacc                  shift and go to state 48

state 39

    (35) prods -> prods prod .

    PERCENTAGE      reduce using rule 35 (prods -> prods prod .)
    WORD            reduce using rule 35 (prods -> prods prod .)


state 40

    (37) prod -> WORD . WORD expProd LEFTCOTTER CHARS RIGHTCOTTER

    WORD            shift and go to state 49


state 41

    (34) vars -> WORD EQUAL LEFTCOTTER . RIGHTCOTTER

    RIGHTCOTTER     shift and go to state 50


state 42

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .

    HASHTAGS        reduce using rule 23 (precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .)
    WORD            reduce using rule 23 (precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .)


state 43

    (25) precedences -> precedences tokenprecedence .

    SRIGHTBRACKET   reduce using rule 25 (precedences -> precedences tokenprecedence .)
    LEFTBRACKET     reduce using rule 25 (precedences -> precedences tokenprecedence .)


state 44

    (27) tokenprecedence -> LEFTBRACKET . rl COMMA nametokensprec RIGHTBRACKET COMMA
    (28) rl -> . SQM RIGHT SQM
    (29) rl -> . SQM LEFT SQM

    SQM             shift and go to state 52

    rl                             shift and go to state 51

state 45

    (17) function -> RE LEFTBRACKET . content RIGHTBRACKET comment
    (18) content -> . SQM UPPERWORD SQM COMMA EXPRESSION
    (19) content -> . SQM UPPERWORD SQM COMMA WORD
    (20) content -> . STRING COMMA EXPRESSION
    (21) content -> . CHARACTERS COMMA EXPRESSION

    SQM             shift and go to state 54
    STRING          shift and go to state 55
    CHARACTERS      shift and go to state 56

    content                        shift and go to state 53

state 46

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames . SRIGHTBRACKET comment
    (13) tokenNames -> tokenNames . COMMA SQM UPPERWORD SQM

    SRIGHTBRACKET   shift and go to state 57
    COMMA           shift and go to state 58


state 47

    (14) tokenNames -> SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 59


state 48

    (22) yacc -> YACCMARKER precedence comment vars prods PERCENTAGE functionsyacc . inityacc parse
    (47) functionsyacc -> functionsyacc . functionyacc
    (53) inityacc -> . WORD EQUAL INITYACC
    (49) functionyacc -> . FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL

    WORD            shift and go to state 62
    FUNCTION        shift and go to state 63

    inityacc                       shift and go to state 60
    functionyacc                   shift and go to state 61

state 49

    (37) prod -> WORD WORD . expProd LEFTCOTTER CHARS RIGHTCOTTER
    (38) expProd -> . expProd UPPERWORD
    (39) expProd -> . expProd WORD
    (40) expProd -> . expProd SQM CHAR SQM
    (41) expProd -> . expProd SQM EQUAL SQM
    (42) expProd -> . expProd SQM LEFTBRACKET SQM
    (43) expProd -> . expProd SQM RIGHTBRACKET SQM
    (44) expProd -> . expProd markerPrec
    (45) expProd -> .

    LEFTCOTTER      reduce using rule 45 (expProd -> .)
    UPPERWORD       reduce using rule 45 (expProd -> .)
    WORD            reduce using rule 45 (expProd -> .)
    SQM             reduce using rule 45 (expProd -> .)
    PRECTAG         reduce using rule 45 (expProd -> .)

    expProd                        shift and go to state 64

state 50

    (34) vars -> WORD EQUAL LEFTCOTTER RIGHTCOTTER .

    PERCENTAGE      reduce using rule 34 (vars -> WORD EQUAL LEFTCOTTER RIGHTCOTTER .)
    WORD            reduce using rule 34 (vars -> WORD EQUAL LEFTCOTTER RIGHTCOTTER .)


state 51

    (27) tokenprecedence -> LEFTBRACKET rl . COMMA nametokensprec RIGHTBRACKET COMMA

    COMMA           shift and go to state 65


state 52

    (28) rl -> SQM . RIGHT SQM
    (29) rl -> SQM . LEFT SQM

    RIGHT           shift and go to state 66
    LEFT            shift and go to state 67


state 53

    (17) function -> RE LEFTBRACKET content . RIGHTBRACKET comment

    RIGHTBRACKET    shift and go to state 68


state 54

    (18) content -> SQM . UPPERWORD SQM COMMA EXPRESSION
    (19) content -> SQM . UPPERWORD SQM COMMA WORD

    UPPERWORD       shift and go to state 69


state 55

    (20) content -> STRING . COMMA EXPRESSION

    COMMA           shift and go to state 70


state 56

    (21) content -> CHARACTERS . COMMA EXPRESSION

    COMMA           shift and go to state 71


state 57

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 72

state 58

    (13) tokenNames -> tokenNames COMMA . SQM UPPERWORD SQM

    SQM             shift and go to state 73


state 59

    (14) tokenNames -> SQM UPPERWORD . SQM

    SQM             shift and go to state 74


state 60

    (22) yacc -> YACCMARKER precedence comment vars prods PERCENTAGE functionsyacc inityacc . parse
    (52) parse -> . WORD LEFTBRACKET CHARACTERS RIGHTBRACKET

    WORD            shift and go to state 76

    parse                          shift and go to state 75

state 61

    (47) functionsyacc -> functionsyacc functionyacc .

    WORD            reduce using rule 47 (functionsyacc -> functionsyacc functionyacc .)
    FUNCTION        reduce using rule 47 (functionsyacc -> functionsyacc functionyacc .)


state 62

    (53) inityacc -> WORD . EQUAL INITYACC

    EQUAL           shift and go to state 77


state 63

    (49) functionyacc -> FUNCTION . BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL

    BODYFUNCTIONLINE shift and go to state 78


state 64

    (37) prod -> WORD WORD expProd . LEFTCOTTER CHARS RIGHTCOTTER
    (38) expProd -> expProd . UPPERWORD
    (39) expProd -> expProd . WORD
    (40) expProd -> expProd . SQM CHAR SQM
    (41) expProd -> expProd . SQM EQUAL SQM
    (42) expProd -> expProd . SQM LEFTBRACKET SQM
    (43) expProd -> expProd . SQM RIGHTBRACKET SQM
    (44) expProd -> expProd . markerPrec
    (46) markerPrec -> . PRECTAG UPPERWORD

    LEFTCOTTER      shift and go to state 80
    UPPERWORD       shift and go to state 81
    WORD            shift and go to state 79
    SQM             shift and go to state 82
    PRECTAG         shift and go to state 84

    markerPrec                     shift and go to state 83

state 65

    (27) tokenprecedence -> LEFTBRACKET rl COMMA . nametokensprec RIGHTBRACKET COMMA
    (30) nametokensprec -> . nametokensprec COMMA SQM UPPERWORD SQM
    (31) nametokensprec -> . nametokensprec COMMA SQM CHAR SQM
    (32) nametokensprec -> . SQM CHAR SQM
    (33) nametokensprec -> . SQM UPPERWORD SQM

    SQM             shift and go to state 86

    nametokensprec                 shift and go to state 85

state 66

    (28) rl -> SQM RIGHT . SQM

    SQM             shift and go to state 87


state 67

    (29) rl -> SQM LEFT . SQM

    SQM             shift and go to state 88


state 68

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words NEWLINE
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 89

state 69

    (18) content -> SQM UPPERWORD . SQM COMMA EXPRESSION
    (19) content -> SQM UPPERWORD . SQM COMMA WORD

    SQM             shift and go to state 90


state 70

    (20) content -> STRING COMMA . EXPRESSION

    EXPRESSION      shift and go to state 91


state 71

    (21) content -> CHARACTERS COMMA . EXPRESSION

    EXPRESSION      shift and go to state 92


state 72

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .

    RE              reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)
    YACCMARKER      reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)


state 73

    (13) tokenNames -> tokenNames COMMA SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 93


state 74

    (14) tokenNames -> SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)


state 75

    (22) yacc -> YACCMARKER precedence comment vars prods PERCENTAGE functionsyacc inityacc parse .

    $end            reduce using rule 22 (yacc -> YACCMARKER precedence comment vars prods PERCENTAGE functionsyacc inityacc parse .)


state 76

    (52) parse -> WORD . LEFTBRACKET CHARACTERS RIGHTBRACKET

    LEFTBRACKET     shift and go to state 94


state 77

    (53) inityacc -> WORD EQUAL . INITYACC

    INITYACC        shift and go to state 95


state 78

    (49) functionyacc -> FUNCTION BODYFUNCTIONLINE . bodyfunction BODYFUNCTIONFINAL
    (50) bodyfunction -> . bodyfunction BODYFUNCTIONLINE
    (51) bodyfunction -> .

    BODYFUNCTIONFINAL reduce using rule 51 (bodyfunction -> .)
    BODYFUNCTIONLINE reduce using rule 51 (bodyfunction -> .)

    bodyfunction                   shift and go to state 96

state 79

    (39) expProd -> expProd WORD .

    LEFTCOTTER      reduce using rule 39 (expProd -> expProd WORD .)
    UPPERWORD       reduce using rule 39 (expProd -> expProd WORD .)
    WORD            reduce using rule 39 (expProd -> expProd WORD .)
    SQM             reduce using rule 39 (expProd -> expProd WORD .)
    PRECTAG         reduce using rule 39 (expProd -> expProd WORD .)


state 80

    (37) prod -> WORD WORD expProd LEFTCOTTER . CHARS RIGHTCOTTER

    CHARS           shift and go to state 97


state 81

    (38) expProd -> expProd UPPERWORD .

    LEFTCOTTER      reduce using rule 38 (expProd -> expProd UPPERWORD .)
    UPPERWORD       reduce using rule 38 (expProd -> expProd UPPERWORD .)
    WORD            reduce using rule 38 (expProd -> expProd UPPERWORD .)
    SQM             reduce using rule 38 (expProd -> expProd UPPERWORD .)
    PRECTAG         reduce using rule 38 (expProd -> expProd UPPERWORD .)


state 82

    (40) expProd -> expProd SQM . CHAR SQM
    (41) expProd -> expProd SQM . EQUAL SQM
    (42) expProd -> expProd SQM . LEFTBRACKET SQM
    (43) expProd -> expProd SQM . RIGHTBRACKET SQM

    CHAR            shift and go to state 98
    EQUAL           shift and go to state 99
    LEFTBRACKET     shift and go to state 100
    RIGHTBRACKET    shift and go to state 101


state 83

    (44) expProd -> expProd markerPrec .

    LEFTCOTTER      reduce using rule 44 (expProd -> expProd markerPrec .)
    UPPERWORD       reduce using rule 44 (expProd -> expProd markerPrec .)
    WORD            reduce using rule 44 (expProd -> expProd markerPrec .)
    SQM             reduce using rule 44 (expProd -> expProd markerPrec .)
    PRECTAG         reduce using rule 44 (expProd -> expProd markerPrec .)


state 84

    (46) markerPrec -> PRECTAG . UPPERWORD

    UPPERWORD       shift and go to state 102


state 85

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec . RIGHTBRACKET COMMA
    (30) nametokensprec -> nametokensprec . COMMA SQM UPPERWORD SQM
    (31) nametokensprec -> nametokensprec . COMMA SQM CHAR SQM

    RIGHTBRACKET    shift and go to state 104
    COMMA           shift and go to state 103


state 86

    (32) nametokensprec -> SQM . CHAR SQM
    (33) nametokensprec -> SQM . UPPERWORD SQM

    CHAR            shift and go to state 105
    UPPERWORD       shift and go to state 106


state 87

    (28) rl -> SQM RIGHT SQM .

    COMMA           reduce using rule 28 (rl -> SQM RIGHT SQM .)


state 88

    (29) rl -> SQM LEFT SQM .

    COMMA           reduce using rule 29 (rl -> SQM LEFT SQM .)


state 89

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET comment .

    RE              reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)
    YACCMARKER      reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)


state 90

    (18) content -> SQM UPPERWORD SQM . COMMA EXPRESSION
    (19) content -> SQM UPPERWORD SQM . COMMA WORD

    COMMA           shift and go to state 107


state 91

    (20) content -> STRING COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 20 (content -> STRING COMMA EXPRESSION .)


state 92

    (21) content -> CHARACTERS COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 21 (content -> CHARACTERS COMMA EXPRESSION .)


state 93

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 108


state 94

    (52) parse -> WORD LEFTBRACKET . CHARACTERS RIGHTBRACKET

    CHARACTERS      shift and go to state 109


state 95

    (53) inityacc -> WORD EQUAL INITYACC .

    WORD            reduce using rule 53 (inityacc -> WORD EQUAL INITYACC .)


state 96

    (49) functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction . BODYFUNCTIONFINAL
    (50) bodyfunction -> bodyfunction . BODYFUNCTIONLINE

    BODYFUNCTIONFINAL shift and go to state 111
    BODYFUNCTIONLINE shift and go to state 110


state 97

    (37) prod -> WORD WORD expProd LEFTCOTTER CHARS . RIGHTCOTTER

    RIGHTCOTTER     shift and go to state 112


state 98

    (40) expProd -> expProd SQM CHAR . SQM

    SQM             shift and go to state 113


state 99

    (41) expProd -> expProd SQM EQUAL . SQM

    SQM             shift and go to state 114


state 100

    (42) expProd -> expProd SQM LEFTBRACKET . SQM

    SQM             shift and go to state 115


state 101

    (43) expProd -> expProd SQM RIGHTBRACKET . SQM

    SQM             shift and go to state 116


state 102

    (46) markerPrec -> PRECTAG UPPERWORD .

    LEFTCOTTER      reduce using rule 46 (markerPrec -> PRECTAG UPPERWORD .)
    UPPERWORD       reduce using rule 46 (markerPrec -> PRECTAG UPPERWORD .)
    WORD            reduce using rule 46 (markerPrec -> PRECTAG UPPERWORD .)
    SQM             reduce using rule 46 (markerPrec -> PRECTAG UPPERWORD .)
    PRECTAG         reduce using rule 46 (markerPrec -> PRECTAG UPPERWORD .)


state 103

    (30) nametokensprec -> nametokensprec COMMA . SQM UPPERWORD SQM
    (31) nametokensprec -> nametokensprec COMMA . SQM CHAR SQM

    SQM             shift and go to state 117


state 104

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET . COMMA

    COMMA           shift and go to state 118


state 105

    (32) nametokensprec -> SQM CHAR . SQM

    SQM             shift and go to state 119


state 106

    (33) nametokensprec -> SQM UPPERWORD . SQM

    SQM             shift and go to state 120


state 107

    (18) content -> SQM UPPERWORD SQM COMMA . EXPRESSION
    (19) content -> SQM UPPERWORD SQM COMMA . WORD

    EXPRESSION      shift and go to state 121
    WORD            shift and go to state 122


state 108

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)


state 109

    (52) parse -> WORD LEFTBRACKET CHARACTERS . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 123


state 110

    (50) bodyfunction -> bodyfunction BODYFUNCTIONLINE .

    BODYFUNCTIONFINAL reduce using rule 50 (bodyfunction -> bodyfunction BODYFUNCTIONLINE .)
    BODYFUNCTIONLINE reduce using rule 50 (bodyfunction -> bodyfunction BODYFUNCTIONLINE .)


state 111

    (49) functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL .

    WORD            reduce using rule 49 (functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL .)
    FUNCTION        reduce using rule 49 (functionyacc -> FUNCTION BODYFUNCTIONLINE bodyfunction BODYFUNCTIONFINAL .)


state 112

    (37) prod -> WORD WORD expProd LEFTCOTTER CHARS RIGHTCOTTER .

    PERCENTAGE      reduce using rule 37 (prod -> WORD WORD expProd LEFTCOTTER CHARS RIGHTCOTTER .)
    WORD            reduce using rule 37 (prod -> WORD WORD expProd LEFTCOTTER CHARS RIGHTCOTTER .)


state 113

    (40) expProd -> expProd SQM CHAR SQM .

    LEFTCOTTER      reduce using rule 40 (expProd -> expProd SQM CHAR SQM .)
    UPPERWORD       reduce using rule 40 (expProd -> expProd SQM CHAR SQM .)
    WORD            reduce using rule 40 (expProd -> expProd SQM CHAR SQM .)
    SQM             reduce using rule 40 (expProd -> expProd SQM CHAR SQM .)
    PRECTAG         reduce using rule 40 (expProd -> expProd SQM CHAR SQM .)


state 114

    (41) expProd -> expProd SQM EQUAL SQM .

    LEFTCOTTER      reduce using rule 41 (expProd -> expProd SQM EQUAL SQM .)
    UPPERWORD       reduce using rule 41 (expProd -> expProd SQM EQUAL SQM .)
    WORD            reduce using rule 41 (expProd -> expProd SQM EQUAL SQM .)
    SQM             reduce using rule 41 (expProd -> expProd SQM EQUAL SQM .)
    PRECTAG         reduce using rule 41 (expProd -> expProd SQM EQUAL SQM .)


state 115

    (42) expProd -> expProd SQM LEFTBRACKET SQM .

    LEFTCOTTER      reduce using rule 42 (expProd -> expProd SQM LEFTBRACKET SQM .)
    UPPERWORD       reduce using rule 42 (expProd -> expProd SQM LEFTBRACKET SQM .)
    WORD            reduce using rule 42 (expProd -> expProd SQM LEFTBRACKET SQM .)
    SQM             reduce using rule 42 (expProd -> expProd SQM LEFTBRACKET SQM .)
    PRECTAG         reduce using rule 42 (expProd -> expProd SQM LEFTBRACKET SQM .)


state 116

    (43) expProd -> expProd SQM RIGHTBRACKET SQM .

    LEFTCOTTER      reduce using rule 43 (expProd -> expProd SQM RIGHTBRACKET SQM .)
    UPPERWORD       reduce using rule 43 (expProd -> expProd SQM RIGHTBRACKET SQM .)
    WORD            reduce using rule 43 (expProd -> expProd SQM RIGHTBRACKET SQM .)
    SQM             reduce using rule 43 (expProd -> expProd SQM RIGHTBRACKET SQM .)
    PRECTAG         reduce using rule 43 (expProd -> expProd SQM RIGHTBRACKET SQM .)


state 117

    (30) nametokensprec -> nametokensprec COMMA SQM . UPPERWORD SQM
    (31) nametokensprec -> nametokensprec COMMA SQM . CHAR SQM

    UPPERWORD       shift and go to state 124
    CHAR            shift and go to state 125


state 118

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .

    SRIGHTBRACKET   reduce using rule 27 (tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .)
    LEFTBRACKET     reduce using rule 27 (tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .)


state 119

    (32) nametokensprec -> SQM CHAR SQM .

    RIGHTBRACKET    reduce using rule 32 (nametokensprec -> SQM CHAR SQM .)
    COMMA           reduce using rule 32 (nametokensprec -> SQM CHAR SQM .)


state 120

    (33) nametokensprec -> SQM UPPERWORD SQM .

    RIGHTBRACKET    reduce using rule 33 (nametokensprec -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 33 (nametokensprec -> SQM UPPERWORD SQM .)


state 121

    (18) content -> SQM UPPERWORD SQM COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 18 (content -> SQM UPPERWORD SQM COMMA EXPRESSION .)


state 122

    (19) content -> SQM UPPERWORD SQM COMMA WORD .

    RIGHTBRACKET    reduce using rule 19 (content -> SQM UPPERWORD SQM COMMA WORD .)


state 123

    (52) parse -> WORD LEFTBRACKET CHARACTERS RIGHTBRACKET .

    $end            reduce using rule 52 (parse -> WORD LEFTBRACKET CHARACTERS RIGHTBRACKET .)


state 124

    (30) nametokensprec -> nametokensprec COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 126


state 125

    (31) nametokensprec -> nametokensprec COMMA SQM CHAR . SQM

    SQM             shift and go to state 127


state 126

    (30) nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .

    RIGHTBRACKET    reduce using rule 30 (nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 30 (nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .)


state 127

    (31) nametokensprec -> nametokensprec COMMA SQM CHAR SQM .

    RIGHTBRACKET    reduce using rule 31 (nametokensprec -> nametokensprec COMMA SQM CHAR SQM .)
    COMMA           reduce using rule 31 (nametokensprec -> nametokensprec COMMA SQM CHAR SQM .)

