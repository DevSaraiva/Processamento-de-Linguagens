Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> frase
Rule 1     frase -> lex
Rule 2     lex -> LEXMARKER literals ignore tokens functions
Rule 3     literals -> LITERALS EQUAL SPACE CHARACTERS comment
Rule 4     literals -> <empty>
Rule 5     comment -> HASHTAGS words
Rule 6     comment -> <empty>
Rule 7     words -> words WORD
Rule 8     words -> WORD
Rule 9     ignore -> IGNORE EQUAL SPACE CHARACTERS comment
Rule 10    ignore -> <empty>
Rule 11    tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
Rule 12    tokens -> <empty>
Rule 13    tokenNames -> tokenNames COMMA SQM UPPERWORD SQM
Rule 14    tokenNames -> SQM UPPERWORD SQM
Rule 15    functions -> functions function
Rule 16    functions -> <empty>
Rule 17    function -> RE LEFTBRACKET content RIGHTBRACKET comment
Rule 18    content -> SQM UPPERWORD SQM COMMA EXPRESSION
Rule 19    content -> SQM UPPERWORD SQM COMMA WORD
Rule 20    content -> STRING COMMA EXPRESSION
Rule 21    content -> CHARACTERS COMMA EXPRESSION

Terminals, with rules where they appear

CHARACTERS           : 3 9 21
COMMA                : 13 18 19 20 21
EQUAL                : 3 9 11
EXPRESSION           : 18 20 21
HASHTAGS             : 5
IGNORE               : 9
LEFTBRACKET          : 17
LEXMARKER            : 2
LITERALS             : 3
RE                   : 17
RIGHTBRACKET         : 17
SLEFTBRACKET         : 11
SPACE                : 3 9
SQM                  : 13 13 14 14 18 18 19 19
SRIGHTBRACKET        : 11
STRING               : 20
TOKENS               : 11
UPPERWORD            : 13 14 18 19
WORD                 : 7 8 19
error                : 

Nonterminals, with rules where they appear

comment              : 3 9 11 17
content              : 17
frase                : 0
function             : 15
functions            : 2 15
ignore               : 2
lex                  : 1
literals             : 2
tokenNames           : 11 13
tokens               : 2
words                : 5 7

Parsing method: LALR

state 0

    (0) S' -> . frase
    (1) frase -> . lex
    (2) lex -> . LEXMARKER literals ignore tokens functions

    LEXMARKER       shift and go to state 3

    frase                          shift and go to state 1
    lex                            shift and go to state 2

state 1

    (0) S' -> frase .



state 2

    (1) frase -> lex .

    $end            reduce using rule 1 (frase -> lex .)


state 3

    (2) lex -> LEXMARKER . literals ignore tokens functions
    (3) literals -> . LITERALS EQUAL SPACE CHARACTERS comment
    (4) literals -> .

    LITERALS        shift and go to state 5
    IGNORE          reduce using rule 4 (literals -> .)
    TOKENS          reduce using rule 4 (literals -> .)
    RE              reduce using rule 4 (literals -> .)
    $end            reduce using rule 4 (literals -> .)

    literals                       shift and go to state 4

state 4

    (2) lex -> LEXMARKER literals . ignore tokens functions
    (9) ignore -> . IGNORE EQUAL SPACE CHARACTERS comment
    (10) ignore -> .

    IGNORE          shift and go to state 7
    TOKENS          reduce using rule 10 (ignore -> .)
    RE              reduce using rule 10 (ignore -> .)
    $end            reduce using rule 10 (ignore -> .)

    ignore                         shift and go to state 6

state 5

    (3) literals -> LITERALS . EQUAL SPACE CHARACTERS comment

    EQUAL           shift and go to state 8


state 6

    (2) lex -> LEXMARKER literals ignore . tokens functions
    (11) tokens -> . TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
    (12) tokens -> .

    TOKENS          shift and go to state 10
    RE              reduce using rule 12 (tokens -> .)
    $end            reduce using rule 12 (tokens -> .)

    tokens                         shift and go to state 9

state 7

    (9) ignore -> IGNORE . EQUAL SPACE CHARACTERS comment

    EQUAL           shift and go to state 11


state 8

    (3) literals -> LITERALS EQUAL . SPACE CHARACTERS comment

    SPACE           shift and go to state 12


state 9

    (2) lex -> LEXMARKER literals ignore tokens . functions
    (15) functions -> . functions function
    (16) functions -> .

    RE              reduce using rule 16 (functions -> .)
    $end            reduce using rule 16 (functions -> .)

    functions                      shift and go to state 13

state 10

    (11) tokens -> TOKENS . EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    EQUAL           shift and go to state 14


state 11

    (9) ignore -> IGNORE EQUAL . SPACE CHARACTERS comment

    SPACE           shift and go to state 15


state 12

    (3) literals -> LITERALS EQUAL SPACE . CHARACTERS comment

    CHARACTERS      shift and go to state 16


state 13

    (2) lex -> LEXMARKER literals ignore tokens functions .
    (15) functions -> functions . function
    (17) function -> . RE LEFTBRACKET content RIGHTBRACKET comment

    $end            reduce using rule 2 (lex -> LEXMARKER literals ignore tokens functions .)
    RE              shift and go to state 18

    function                       shift and go to state 17

state 14

    (11) tokens -> TOKENS EQUAL . SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    SLEFTBRACKET    shift and go to state 19


state 15

    (9) ignore -> IGNORE EQUAL SPACE . CHARACTERS comment

    CHARACTERS      shift and go to state 20


state 16

    (3) literals -> LITERALS EQUAL SPACE CHARACTERS . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 22
    IGNORE          reduce using rule 6 (comment -> .)
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 21

state 17

    (15) functions -> functions function .

    RE              reduce using rule 15 (functions -> functions function .)
    $end            reduce using rule 15 (functions -> functions function .)


state 18

    (17) function -> RE . LEFTBRACKET content RIGHTBRACKET comment

    LEFTBRACKET     shift and go to state 23


state 19

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET . tokenNames SRIGHTBRACKET comment
    (13) tokenNames -> . tokenNames COMMA SQM UPPERWORD SQM
    (14) tokenNames -> . SQM UPPERWORD SQM

    SQM             shift and go to state 25

    tokenNames                     shift and go to state 24

state 20

    (9) ignore -> IGNORE EQUAL SPACE CHARACTERS . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 22
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 26

state 21

    (3) literals -> LITERALS EQUAL SPACE CHARACTERS comment .

    IGNORE          reduce using rule 3 (literals -> LITERALS EQUAL SPACE CHARACTERS comment .)
    TOKENS          reduce using rule 3 (literals -> LITERALS EQUAL SPACE CHARACTERS comment .)
    RE              reduce using rule 3 (literals -> LITERALS EQUAL SPACE CHARACTERS comment .)
    $end            reduce using rule 3 (literals -> LITERALS EQUAL SPACE CHARACTERS comment .)


state 22

    (5) comment -> HASHTAGS . words
    (7) words -> . words WORD
    (8) words -> . WORD

    WORD            shift and go to state 28

    words                          shift and go to state 27

state 23

    (17) function -> RE LEFTBRACKET . content RIGHTBRACKET comment
    (18) content -> . SQM UPPERWORD SQM COMMA EXPRESSION
    (19) content -> . SQM UPPERWORD SQM COMMA WORD
    (20) content -> . STRING COMMA EXPRESSION
    (21) content -> . CHARACTERS COMMA EXPRESSION

    SQM             shift and go to state 30
    STRING          shift and go to state 31
    CHARACTERS      shift and go to state 32

    content                        shift and go to state 29

state 24

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames . SRIGHTBRACKET comment
    (13) tokenNames -> tokenNames . COMMA SQM UPPERWORD SQM

    SRIGHTBRACKET   shift and go to state 33
    COMMA           shift and go to state 34


state 25

    (14) tokenNames -> SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 35


state 26

    (9) ignore -> IGNORE EQUAL SPACE CHARACTERS comment .

    TOKENS          reduce using rule 9 (ignore -> IGNORE EQUAL SPACE CHARACTERS comment .)
    RE              reduce using rule 9 (ignore -> IGNORE EQUAL SPACE CHARACTERS comment .)
    $end            reduce using rule 9 (ignore -> IGNORE EQUAL SPACE CHARACTERS comment .)


state 27

    (5) comment -> HASHTAGS words .
    (7) words -> words . WORD

    IGNORE          reduce using rule 5 (comment -> HASHTAGS words .)
    TOKENS          reduce using rule 5 (comment -> HASHTAGS words .)
    RE              reduce using rule 5 (comment -> HASHTAGS words .)
    $end            reduce using rule 5 (comment -> HASHTAGS words .)
    WORD            shift and go to state 36


state 28

    (8) words -> WORD .

    WORD            reduce using rule 8 (words -> WORD .)
    IGNORE          reduce using rule 8 (words -> WORD .)
    TOKENS          reduce using rule 8 (words -> WORD .)
    RE              reduce using rule 8 (words -> WORD .)
    $end            reduce using rule 8 (words -> WORD .)


state 29

    (17) function -> RE LEFTBRACKET content . RIGHTBRACKET comment

    RIGHTBRACKET    shift and go to state 37


state 30

    (18) content -> SQM . UPPERWORD SQM COMMA EXPRESSION
    (19) content -> SQM . UPPERWORD SQM COMMA WORD

    UPPERWORD       shift and go to state 38


state 31

    (20) content -> STRING . COMMA EXPRESSION

    COMMA           shift and go to state 39


state 32

    (21) content -> CHARACTERS . COMMA EXPRESSION

    COMMA           shift and go to state 40


state 33

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 22
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 41

state 34

    (13) tokenNames -> tokenNames COMMA . SQM UPPERWORD SQM

    SQM             shift and go to state 42


state 35

    (14) tokenNames -> SQM UPPERWORD . SQM

    SQM             shift and go to state 43


state 36

    (7) words -> words WORD .

    WORD            reduce using rule 7 (words -> words WORD .)
    IGNORE          reduce using rule 7 (words -> words WORD .)
    TOKENS          reduce using rule 7 (words -> words WORD .)
    RE              reduce using rule 7 (words -> words WORD .)
    $end            reduce using rule 7 (words -> words WORD .)


state 37

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 22
    RE              reduce using rule 6 (comment -> .)
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 44

state 38

    (18) content -> SQM UPPERWORD . SQM COMMA EXPRESSION
    (19) content -> SQM UPPERWORD . SQM COMMA WORD

    SQM             shift and go to state 45


state 39

    (20) content -> STRING COMMA . EXPRESSION

    EXPRESSION      shift and go to state 46


state 40

    (21) content -> CHARACTERS COMMA . EXPRESSION

    EXPRESSION      shift and go to state 47


state 41

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .

    RE              reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)
    $end            reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)


state 42

    (13) tokenNames -> tokenNames COMMA SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 48


state 43

    (14) tokenNames -> SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)


state 44

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET comment .

    RE              reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)
    $end            reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)


state 45

    (18) content -> SQM UPPERWORD SQM . COMMA EXPRESSION
    (19) content -> SQM UPPERWORD SQM . COMMA WORD

    COMMA           shift and go to state 49


state 46

    (20) content -> STRING COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 20 (content -> STRING COMMA EXPRESSION .)


state 47

    (21) content -> CHARACTERS COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 21 (content -> CHARACTERS COMMA EXPRESSION .)


state 48

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 50


state 49

    (18) content -> SQM UPPERWORD SQM COMMA . EXPRESSION
    (19) content -> SQM UPPERWORD SQM COMMA . WORD

    EXPRESSION      shift and go to state 51
    WORD            shift and go to state 52


state 50

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)


state 51

    (18) content -> SQM UPPERWORD SQM COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 18 (content -> SQM UPPERWORD SQM COMMA EXPRESSION .)


state 52

    (19) content -> SQM UPPERWORD SQM COMMA WORD .

    RIGHTBRACKET    reduce using rule 19 (content -> SQM UPPERWORD SQM COMMA WORD .)

