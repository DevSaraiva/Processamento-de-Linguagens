Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    DEF
    EXPGRAM
    INITVAR
    INITYACC
    LEFTCOTTER
    NAMEFUNC
    NAMEPROD
    NAMEVAR
    PARSEYACC
    RETURNEDPRODS
    RIGHTCOTTER

Grammar

Rule 0     S' -> phrase
Rule 1     phrase -> lex yacc
Rule 2     lex -> LEXMARKER literals ignore tokens functions
Rule 3     literals -> LITERALS EQUAL CHARACTERS comment
Rule 4     literals -> <empty>
Rule 5     comment -> HASHTAGS words
Rule 6     comment -> <empty>
Rule 7     words -> words WORD
Rule 8     words -> WORD
Rule 9     ignore -> IGNORE EQUAL CHARACTERS comment
Rule 10    ignore -> <empty>
Rule 11    tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
Rule 12    tokens -> <empty>
Rule 13    tokenNames -> tokenNames COMMA SQM UPPERWORD SQM
Rule 14    tokenNames -> SQM UPPERWORD SQM
Rule 15    functions -> functions function
Rule 16    functions -> <empty>
Rule 17    function -> RE LEFTBRACKET content RIGHTBRACKET comment
Rule 18    content -> SQM UPPERWORD SQM COMMA EXPRESSION
Rule 19    content -> SQM UPPERWORD SQM COMMA WORD
Rule 20    content -> STRING COMMA EXPRESSION
Rule 21    content -> CHARACTERS COMMA EXPRESSION
Rule 22    yacc -> YACCMARKER precedence comment
Rule 23    precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET
Rule 24    precedence -> <empty>
Rule 25    precedences -> precedences tokenprecedence
Rule 26    precedences -> <empty>
Rule 27    tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA
Rule 28    tokenprecedence -> <empty>
Rule 29    rl -> SQM RIGHT SQM
Rule 30    rl -> SQM LEFT SQM
Rule 31    nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM
Rule 32    nametokensprec -> nametokensprec COMMA SQM CHAR SQM
Rule 33    nametokensprec -> SQM CHAR SQM
Rule 34    nametokensprec -> SQM UPPERWORD SQM

Terminals, with rules where they appear

CHAR                 : 32 33
CHARACTERS           : 3 9 21
COLON                : 
COMMA                : 13 18 19 20 21 27 27 31 32
DEF                  : 
EQUAL                : 3 9 11 23
EXPGRAM              : 
EXPRESSION           : 18 20 21
HASHTAGS             : 5
IGNORE               : 9
INITVAR              : 
INITYACC             : 
LEFT                 : 30
LEFTBRACKET          : 17 27
LEFTCOTTER           : 
LEXMARKER            : 2
LITERALS             : 3
NAMEFUNC             : 
NAMEPROD             : 
NAMEVAR              : 
PARSEYACC            : 
PRECEDENCE           : 23
RE                   : 17
RETURNEDPRODS        : 
RIGHT                : 29
RIGHTBRACKET         : 17 27
RIGHTCOTTER          : 
SLEFTBRACKET         : 11 23
SQM                  : 13 13 14 14 18 18 19 19 29 29 30 30 31 31 32 32 33 33 34 34
SRIGHTBRACKET        : 11 23
STRING               : 20
TOKENS               : 11
UPPERWORD            : 13 14 18 19 31 34
WORD                 : 7 8 19
YACCMARKER           : 22
error                : 

Nonterminals, with rules where they appear

comment              : 3 9 11 17 22
content              : 17
function             : 15
functions            : 2 15
ignore               : 2
lex                  : 1
literals             : 2
nametokensprec       : 27 31 32
phrase               : 0
precedence           : 22
precedences          : 23 25
rl                   : 27
tokenNames           : 11 13
tokenprecedence      : 25
tokens               : 2
words                : 5 7
yacc                 : 1

Parsing method: LALR

state 0

    (0) S' -> . phrase
    (1) phrase -> . lex yacc
    (2) lex -> . LEXMARKER literals ignore tokens functions

    LEXMARKER       shift and go to state 3

    phrase                         shift and go to state 1
    lex                            shift and go to state 2

state 1

    (0) S' -> phrase .



state 2

    (1) phrase -> lex . yacc
    (22) yacc -> . YACCMARKER precedence comment

    YACCMARKER      shift and go to state 5

    yacc                           shift and go to state 4

state 3

    (2) lex -> LEXMARKER . literals ignore tokens functions
    (3) literals -> . LITERALS EQUAL CHARACTERS comment
    (4) literals -> .

    LITERALS        shift and go to state 7
    IGNORE          reduce using rule 4 (literals -> .)
    TOKENS          reduce using rule 4 (literals -> .)
    RE              reduce using rule 4 (literals -> .)
    YACCMARKER      reduce using rule 4 (literals -> .)

    literals                       shift and go to state 6

state 4

    (1) phrase -> lex yacc .

    $end            reduce using rule 1 (phrase -> lex yacc .)


state 5

    (22) yacc -> YACCMARKER . precedence comment
    (23) precedence -> . PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET
    (24) precedence -> .

    PRECEDENCE      shift and go to state 9
    HASHTAGS        reduce using rule 24 (precedence -> .)
    $end            reduce using rule 24 (precedence -> .)

    precedence                     shift and go to state 8

state 6

    (2) lex -> LEXMARKER literals . ignore tokens functions
    (9) ignore -> . IGNORE EQUAL CHARACTERS comment
    (10) ignore -> .

    IGNORE          shift and go to state 11
    TOKENS          reduce using rule 10 (ignore -> .)
    RE              reduce using rule 10 (ignore -> .)
    YACCMARKER      reduce using rule 10 (ignore -> .)

    ignore                         shift and go to state 10

state 7

    (3) literals -> LITERALS . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 12


state 8

    (22) yacc -> YACCMARKER precedence . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    $end            reduce using rule 6 (comment -> .)

    comment                        shift and go to state 13

state 9

    (23) precedence -> PRECEDENCE . EQUAL SLEFTBRACKET precedences SRIGHTBRACKET

    EQUAL           shift and go to state 15


state 10

    (2) lex -> LEXMARKER literals ignore . tokens functions
    (11) tokens -> . TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment
    (12) tokens -> .

    TOKENS          shift and go to state 17
    RE              reduce using rule 12 (tokens -> .)
    YACCMARKER      reduce using rule 12 (tokens -> .)

    tokens                         shift and go to state 16

state 11

    (9) ignore -> IGNORE . EQUAL CHARACTERS comment

    EQUAL           shift and go to state 18


state 12

    (3) literals -> LITERALS EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 19


state 13

    (22) yacc -> YACCMARKER precedence comment .

    $end            reduce using rule 22 (yacc -> YACCMARKER precedence comment .)


state 14

    (5) comment -> HASHTAGS . words
    (7) words -> . words WORD
    (8) words -> . WORD

    WORD            shift and go to state 21

    words                          shift and go to state 20

state 15

    (23) precedence -> PRECEDENCE EQUAL . SLEFTBRACKET precedences SRIGHTBRACKET

    SLEFTBRACKET    shift and go to state 22


state 16

    (2) lex -> LEXMARKER literals ignore tokens . functions
    (15) functions -> . functions function
    (16) functions -> .

    RE              reduce using rule 16 (functions -> .)
    YACCMARKER      reduce using rule 16 (functions -> .)

    functions                      shift and go to state 23

state 17

    (11) tokens -> TOKENS . EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    EQUAL           shift and go to state 24


state 18

    (9) ignore -> IGNORE EQUAL . CHARACTERS comment

    CHARACTERS      shift and go to state 25


state 19

    (3) literals -> LITERALS EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    IGNORE          reduce using rule 6 (comment -> .)
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 26

state 20

    (5) comment -> HASHTAGS words .
    (7) words -> words . WORD

    $end            reduce using rule 5 (comment -> HASHTAGS words .)
    IGNORE          reduce using rule 5 (comment -> HASHTAGS words .)
    TOKENS          reduce using rule 5 (comment -> HASHTAGS words .)
    RE              reduce using rule 5 (comment -> HASHTAGS words .)
    YACCMARKER      reduce using rule 5 (comment -> HASHTAGS words .)
    WORD            shift and go to state 27


state 21

    (8) words -> WORD .

    WORD            reduce using rule 8 (words -> WORD .)
    $end            reduce using rule 8 (words -> WORD .)
    IGNORE          reduce using rule 8 (words -> WORD .)
    TOKENS          reduce using rule 8 (words -> WORD .)
    RE              reduce using rule 8 (words -> WORD .)
    YACCMARKER      reduce using rule 8 (words -> WORD .)


state 22

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET . precedences SRIGHTBRACKET
    (25) precedences -> . precedences tokenprecedence
    (26) precedences -> .

    SRIGHTBRACKET   reduce using rule 26 (precedences -> .)
    LEFTBRACKET     reduce using rule 26 (precedences -> .)

    precedences                    shift and go to state 28

state 23

    (2) lex -> LEXMARKER literals ignore tokens functions .
    (15) functions -> functions . function
    (17) function -> . RE LEFTBRACKET content RIGHTBRACKET comment

    YACCMARKER      reduce using rule 2 (lex -> LEXMARKER literals ignore tokens functions .)
    RE              shift and go to state 30

    function                       shift and go to state 29

state 24

    (11) tokens -> TOKENS EQUAL . SLEFTBRACKET tokenNames SRIGHTBRACKET comment

    SLEFTBRACKET    shift and go to state 31


state 25

    (9) ignore -> IGNORE EQUAL CHARACTERS . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    TOKENS          reduce using rule 6 (comment -> .)
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 32

state 26

    (3) literals -> LITERALS EQUAL CHARACTERS comment .

    IGNORE          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    TOKENS          reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    RE              reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)
    YACCMARKER      reduce using rule 3 (literals -> LITERALS EQUAL CHARACTERS comment .)


state 27

    (7) words -> words WORD .

    WORD            reduce using rule 7 (words -> words WORD .)
    $end            reduce using rule 7 (words -> words WORD .)
    IGNORE          reduce using rule 7 (words -> words WORD .)
    TOKENS          reduce using rule 7 (words -> words WORD .)
    RE              reduce using rule 7 (words -> words WORD .)
    YACCMARKER      reduce using rule 7 (words -> words WORD .)


state 28

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences . SRIGHTBRACKET
    (25) precedences -> precedences . tokenprecedence
    (27) tokenprecedence -> . LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA
    (28) tokenprecedence -> .

  ! shift/reduce conflict for SRIGHTBRACKET resolved as shift
  ! shift/reduce conflict for LEFTBRACKET resolved as shift
    SRIGHTBRACKET   shift and go to state 33
    LEFTBRACKET     shift and go to state 35

  ! SRIGHTBRACKET   [ reduce using rule 28 (tokenprecedence -> .) ]
  ! LEFTBRACKET     [ reduce using rule 28 (tokenprecedence -> .) ]

    tokenprecedence                shift and go to state 34

state 29

    (15) functions -> functions function .

    RE              reduce using rule 15 (functions -> functions function .)
    YACCMARKER      reduce using rule 15 (functions -> functions function .)


state 30

    (17) function -> RE . LEFTBRACKET content RIGHTBRACKET comment

    LEFTBRACKET     shift and go to state 36


state 31

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET . tokenNames SRIGHTBRACKET comment
    (13) tokenNames -> . tokenNames COMMA SQM UPPERWORD SQM
    (14) tokenNames -> . SQM UPPERWORD SQM

    SQM             shift and go to state 38

    tokenNames                     shift and go to state 37

state 32

    (9) ignore -> IGNORE EQUAL CHARACTERS comment .

    TOKENS          reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    RE              reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)
    YACCMARKER      reduce using rule 9 (ignore -> IGNORE EQUAL CHARACTERS comment .)


state 33

    (23) precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .

    HASHTAGS        reduce using rule 23 (precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .)
    $end            reduce using rule 23 (precedence -> PRECEDENCE EQUAL SLEFTBRACKET precedences SRIGHTBRACKET .)


state 34

    (25) precedences -> precedences tokenprecedence .

    SRIGHTBRACKET   reduce using rule 25 (precedences -> precedences tokenprecedence .)
    LEFTBRACKET     reduce using rule 25 (precedences -> precedences tokenprecedence .)


state 35

    (27) tokenprecedence -> LEFTBRACKET . rl COMMA nametokensprec RIGHTBRACKET COMMA
    (29) rl -> . SQM RIGHT SQM
    (30) rl -> . SQM LEFT SQM

    SQM             shift and go to state 40

    rl                             shift and go to state 39

state 36

    (17) function -> RE LEFTBRACKET . content RIGHTBRACKET comment
    (18) content -> . SQM UPPERWORD SQM COMMA EXPRESSION
    (19) content -> . SQM UPPERWORD SQM COMMA WORD
    (20) content -> . STRING COMMA EXPRESSION
    (21) content -> . CHARACTERS COMMA EXPRESSION

    SQM             shift and go to state 42
    STRING          shift and go to state 43
    CHARACTERS      shift and go to state 44

    content                        shift and go to state 41

state 37

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames . SRIGHTBRACKET comment
    (13) tokenNames -> tokenNames . COMMA SQM UPPERWORD SQM

    SRIGHTBRACKET   shift and go to state 45
    COMMA           shift and go to state 46


state 38

    (14) tokenNames -> SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 47


state 39

    (27) tokenprecedence -> LEFTBRACKET rl . COMMA nametokensprec RIGHTBRACKET COMMA

    COMMA           shift and go to state 48


state 40

    (29) rl -> SQM . RIGHT SQM
    (30) rl -> SQM . LEFT SQM

    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50


state 41

    (17) function -> RE LEFTBRACKET content . RIGHTBRACKET comment

    RIGHTBRACKET    shift and go to state 51


state 42

    (18) content -> SQM . UPPERWORD SQM COMMA EXPRESSION
    (19) content -> SQM . UPPERWORD SQM COMMA WORD

    UPPERWORD       shift and go to state 52


state 43

    (20) content -> STRING . COMMA EXPRESSION

    COMMA           shift and go to state 53


state 44

    (21) content -> CHARACTERS . COMMA EXPRESSION

    COMMA           shift and go to state 54


state 45

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 55

state 46

    (13) tokenNames -> tokenNames COMMA . SQM UPPERWORD SQM

    SQM             shift and go to state 56


state 47

    (14) tokenNames -> SQM UPPERWORD . SQM

    SQM             shift and go to state 57


state 48

    (27) tokenprecedence -> LEFTBRACKET rl COMMA . nametokensprec RIGHTBRACKET COMMA
    (31) nametokensprec -> . nametokensprec COMMA SQM UPPERWORD SQM
    (32) nametokensprec -> . nametokensprec COMMA SQM CHAR SQM
    (33) nametokensprec -> . SQM CHAR SQM
    (34) nametokensprec -> . SQM UPPERWORD SQM

    SQM             shift and go to state 59

    nametokensprec                 shift and go to state 58

state 49

    (29) rl -> SQM RIGHT . SQM

    SQM             shift and go to state 60


state 50

    (30) rl -> SQM LEFT . SQM

    SQM             shift and go to state 61


state 51

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET . comment
    (5) comment -> . HASHTAGS words
    (6) comment -> .

    HASHTAGS        shift and go to state 14
    RE              reduce using rule 6 (comment -> .)
    YACCMARKER      reduce using rule 6 (comment -> .)

    comment                        shift and go to state 62

state 52

    (18) content -> SQM UPPERWORD . SQM COMMA EXPRESSION
    (19) content -> SQM UPPERWORD . SQM COMMA WORD

    SQM             shift and go to state 63


state 53

    (20) content -> STRING COMMA . EXPRESSION

    EXPRESSION      shift and go to state 64


state 54

    (21) content -> CHARACTERS COMMA . EXPRESSION

    EXPRESSION      shift and go to state 65


state 55

    (11) tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .

    RE              reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)
    YACCMARKER      reduce using rule 11 (tokens -> TOKENS EQUAL SLEFTBRACKET tokenNames SRIGHTBRACKET comment .)


state 56

    (13) tokenNames -> tokenNames COMMA SQM . UPPERWORD SQM

    UPPERWORD       shift and go to state 66


state 57

    (14) tokenNames -> SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 14 (tokenNames -> SQM UPPERWORD SQM .)


state 58

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec . RIGHTBRACKET COMMA
    (31) nametokensprec -> nametokensprec . COMMA SQM UPPERWORD SQM
    (32) nametokensprec -> nametokensprec . COMMA SQM CHAR SQM

    RIGHTBRACKET    shift and go to state 68
    COMMA           shift and go to state 67


state 59

    (33) nametokensprec -> SQM . CHAR SQM
    (34) nametokensprec -> SQM . UPPERWORD SQM

    CHAR            shift and go to state 69
    UPPERWORD       shift and go to state 70


state 60

    (29) rl -> SQM RIGHT SQM .

    COMMA           reduce using rule 29 (rl -> SQM RIGHT SQM .)


state 61

    (30) rl -> SQM LEFT SQM .

    COMMA           reduce using rule 30 (rl -> SQM LEFT SQM .)


state 62

    (17) function -> RE LEFTBRACKET content RIGHTBRACKET comment .

    RE              reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)
    YACCMARKER      reduce using rule 17 (function -> RE LEFTBRACKET content RIGHTBRACKET comment .)


state 63

    (18) content -> SQM UPPERWORD SQM . COMMA EXPRESSION
    (19) content -> SQM UPPERWORD SQM . COMMA WORD

    COMMA           shift and go to state 71


state 64

    (20) content -> STRING COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 20 (content -> STRING COMMA EXPRESSION .)


state 65

    (21) content -> CHARACTERS COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 21 (content -> CHARACTERS COMMA EXPRESSION .)


state 66

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 72


state 67

    (31) nametokensprec -> nametokensprec COMMA . SQM UPPERWORD SQM
    (32) nametokensprec -> nametokensprec COMMA . SQM CHAR SQM

    SQM             shift and go to state 73


state 68

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET . COMMA

    COMMA           shift and go to state 74


state 69

    (33) nametokensprec -> SQM CHAR . SQM

    SQM             shift and go to state 75


state 70

    (34) nametokensprec -> SQM UPPERWORD . SQM

    SQM             shift and go to state 76


state 71

    (18) content -> SQM UPPERWORD SQM COMMA . EXPRESSION
    (19) content -> SQM UPPERWORD SQM COMMA . WORD

    EXPRESSION      shift and go to state 77
    WORD            shift and go to state 78


state 72

    (13) tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .

    SRIGHTBRACKET   reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 13 (tokenNames -> tokenNames COMMA SQM UPPERWORD SQM .)


state 73

    (31) nametokensprec -> nametokensprec COMMA SQM . UPPERWORD SQM
    (32) nametokensprec -> nametokensprec COMMA SQM . CHAR SQM

    UPPERWORD       shift and go to state 79
    CHAR            shift and go to state 80


state 74

    (27) tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .

    SRIGHTBRACKET   reduce using rule 27 (tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .)
    LEFTBRACKET     reduce using rule 27 (tokenprecedence -> LEFTBRACKET rl COMMA nametokensprec RIGHTBRACKET COMMA .)


state 75

    (33) nametokensprec -> SQM CHAR SQM .

    RIGHTBRACKET    reduce using rule 33 (nametokensprec -> SQM CHAR SQM .)
    COMMA           reduce using rule 33 (nametokensprec -> SQM CHAR SQM .)


state 76

    (34) nametokensprec -> SQM UPPERWORD SQM .

    RIGHTBRACKET    reduce using rule 34 (nametokensprec -> SQM UPPERWORD SQM .)
    COMMA           reduce using rule 34 (nametokensprec -> SQM UPPERWORD SQM .)


state 77

    (18) content -> SQM UPPERWORD SQM COMMA EXPRESSION .

    RIGHTBRACKET    reduce using rule 18 (content -> SQM UPPERWORD SQM COMMA EXPRESSION .)


state 78

    (19) content -> SQM UPPERWORD SQM COMMA WORD .

    RIGHTBRACKET    reduce using rule 19 (content -> SQM UPPERWORD SQM COMMA WORD .)


state 79

    (31) nametokensprec -> nametokensprec COMMA SQM UPPERWORD . SQM

    SQM             shift and go to state 81


state 80

    (32) nametokensprec -> nametokensprec COMMA SQM CHAR . SQM

    SQM             shift and go to state 82


state 81

    (31) nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .

    RIGHTBRACKET    reduce using rule 31 (nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .)
    COMMA           reduce using rule 31 (nametokensprec -> nametokensprec COMMA SQM UPPERWORD SQM .)


state 82

    (32) nametokensprec -> nametokensprec COMMA SQM CHAR SQM .

    RIGHTBRACKET    reduce using rule 32 (nametokensprec -> nametokensprec COMMA SQM CHAR SQM .)
    COMMA           reduce using rule 32 (nametokensprec -> nametokensprec COMMA SQM CHAR SQM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SRIGHTBRACKET in state 28 resolved as shift
WARNING: shift/reduce conflict for LEFTBRACKET in state 28 resolved as shift
